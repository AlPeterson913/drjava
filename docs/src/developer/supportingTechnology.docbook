<!--
  Chapter covering supporting technology in the DrJava Developer 
  Documentation.  All chapters are joined into a single document 
  in devdoc.docbook.
  
  @version $Id: devdoc.docbook 3498 2006-01-17 22:36:31Z dlsmith $
-->

<chapter id="supportingTechnology">
  <title>Supporting Technology</title>
  <para>This section is intended as a repository of acquired knowledge with respect to supporting technology used with DrJava.  For each tool or library, a section will address questions like:
  
    <itemizedlist>
      <listitem><para>How is this technology used in the DrJava code base or build process?</para></listitem>
      
      <listitem><para>How is the technology distributed; what needs to be done to install it?</para></listitem>
      
      <listitem><para>Do we depend on a specific version of the software?</para></listitem>
      
      <listitem><para>What are the key options or classes that developers should be aware of?</para></listitem>
      
      <listitem><para>Where can more comprehensive documentation be found?</para></listitem>

      <listitem><para>Why has this particular technology been chosen?  What are the alternatives?</para></listitem>
      
    </itemizedlist>
  </para>

  <section id="java">
    <title>Java Language & APIs</title>
    <para>The Java language and APIs are documented by Sun at <ulink url="http://java.sun.com">http://java.sun.com</ulink>.  The language actually exists in different "editions": Standard Edition (SE), Enterprise Edition (EE), and a collection of Micro Editions (ME).  The Standard Edition is DrJava's target platform.  See the <link linkend="installJDK">JDK section of Getting Started</link> for instruction on installing Java.</para>
    <para>The language itself is documented by the Java Language Specification, available at <ulink url="http://java.sun.com/docs/books/jls/index.html">http://java.sun.com/docs/books/jls</ulink>.  This is a good authoritative reference on the language, and any good Java developer should be familiar with it.</para>
    <section>
      <title>The <command>java</command> Command</title>
      <para>Java sources are compiled to a collection of <literal>class</literal> files.  These files can then be interpreted by a Java interpreter, which creates a <firstterm>Java virtual machine (JVM)</firstterm> and executes a class's <literal>main</literal> method.  Sun's <command>java</command> is one such interpreter.</para>
      <para>Documentation on the <command>java</command> command can be found with <ulink url="http://java.sun.com/j2se/1.5.0/docs/tooldocs/">Sun's Java tools documentation</ulink>.</para>
      <para>A typical invocation of the interpreter looks like this:
        <informalexample><para><literal>java -cp lib/plt.jar:classes/base edu.rice.cs.MyClass</literal></para></informalexample>
        The <literal>-cp</literal> option specifies a <firstterm>class path</firstterm> &mdash; a collection of files or directories in which the necessary <literal>class</literal> files are located.  This path is searched from left to right; when the code makes reference to an unknown class name, the first matching <literal>class</literal> file on the class path is used.</para>
      <para>Directories of <literal>class</literal> files may be packaged and compressed into a single <literal>jar</literal> file for simplified distribution.  These are essentially just <literal>zip</literal> archives of <literal>class</literal> file collections.  In addition, a default <literal>main</literal> class can be specified for a <literal>jar</literal> file.  Since all necessary classes for running DrJava are bundled into a single <literal>jar</literal> file, this allows the application to be run with a simplified command syntax: 
        <informalexample><para><literal>java -jar drjava.jar</literal></para></informalexample>
      </para>
    </section>
    <section>
      <title>Standard Java APIs</title>
      <para>DrJava is written in version 5 of Java, and makes extensive use of features that are new in that version.  It's especially important that DrJava developers be quite comfortable with Java generics.  Sun has posted a <ulink url="http://java.sun.com/j2se/1.5/pdf/generics-tutorial.pdf">tutorial by Gilad Bracha</ulink> that provides a good overview.  There is also a a good <ulink url="http://java.sun.com/j2se/1.5.0/docs/guide/language/index.html">summary of Java 5 features</ulink> available in Sun's documentation.</para>
      <para>The API specification is another essential reference for developers, available here: <ulink url="http://java.sun.com/j2se/1.5.0/docs/api/">http://java.sun.com/j2se/1.5.0/docs/api/</ulink>.  A few important packages in the API include:
        <variablelist>
          <varlistentry>
            <term><literal>java.lang</literal></term>
            <listitem><para>The <literal>Object</literal> class, wrapper classes, strings, threads, and interface with the system are all defined here.</para></listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>java.util</literal></term>
            <listitem><para>Standard lists, maps, and other collections are defined here.  Note that the newer, non-synchronized classes (like <literal>ArrayList</literal>) are usually preferred over their older, synchronized counterparts (like <literal>Vector</literal>).</para></listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>java.io</literal></term>
            <listitem><para>Provides access to file reading and writing and other file-system operations.</para></listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>javax.swing</literal></term>
            <listitem><para>The DrJava GUI is implemented using <firstterm>Swing</firstterm>, the standard Java GUI framework.  (Note that many Swing classes and concepts depend on the <literal>java.awt</literal> package.)</para></listitem>
          </varlistentry>
        </variablelist>
      </para>

      <para>The <ulink url="http://java.sun.com/docs/books/tutorial/">Java Tutorial</ulink> provides a collection of small tutorials covering different parts of the APIs.</para>

      <para>Development in DrJava is limited in some ways by a desire for backwards compatibility.  While the program is developed using Java 5, it is still released for platforms that only support Java 1.4.  Thus, most classes and methods that were introduced with the Java 5 APIs cannot currently be used in DrJava.  (Such classes and methods should be designated with a "since 1.5" tag in the API documentation.)  For details, see the discussion on <link linkend="retroweaver">Retroweaver</link>, a tool that enables this backwards compatibility.</para>
    </section>
  </section>

  <section id="javac">
    <title><command>javac</command></title>
    <para>The Sun Java compiler, <command>javac</command>, is used to build DrJava.  The DrJava application also interfaces, at runtime, with the user's <command>javac</command> compiler.  See the <link linkend="installJDK">JDK section of Getting Started</link> for installation instructions.</para>
    <para>Documentation on the <command>javac</command> command can be found with <ulink url="http://java.sun.com/j2se/1.5.0/docs/tooldocs/">Sun's Java tools documentation</ulink>.</para>
    <section>
      <title>Compilation Paths</title>
      <para>There are a number of search paths used as parameters to perform compilation.  To avoid confusion, it's important to be familiar with the distinction between them.
      <itemizedlist>
        <listitem><para>The <firstterm>boot class path</firstterm> is the location of the standard Java APIs.  It is conceptually prepended to the standard class path whenever a search for a class occurs.  By default, this is the location of the APIs used to run the compiler; it is only necessary to manipulate this setting if compilation should occur against a different or customized version of the APIs.</para></listitem>
        <listitem><para>The <firstterm>class path</firstterm> points to additional libraries and classes used for compilation.  For example, if JUnit tests are to be compiled, the <filename>junit.jar</filename> file should be on the class path.  If iterative updates are to be made to the sources (as is usually the case), the location of the compiled classes should be part of the class path as well.</para></listitem>
        <listitem><para>The <firstterm>source path</firstterm> is the location of source files that, while not explicitly required to be compiled, can be automatically compiled if the classes they define are needed.  This allows, for example, the compilation of a single source file to silently trigger the compilation of many others.  Since such on-demand processing changes the compiler's internal symbol tables on-the-fly, however, it's generally not a good idea to take advantage of this feature &mdash; changing the order in which sources are passed to the compiler can change the meaning of the program!  A better alternative is to simply list <emphasis>all</emphasis> sources that need to be compiled explicitly (Ant and DrJava do this easily and automatically), and set the source path to an empty string.</para></listitem>
        <listitem><para>The <firstterm>compiler JVM boot class path</firstterm> is the location of the Java APIs used to <emphasis>run</emphasis> the compiler.  Since <command>javac</command> is <emphasis>implemented</emphasis> in Java, it runs in a JVM, and that JVM needs access to the standard APIs.  It's important to note that there need not be any relationship between this value and tha compilation boot class path.  The <command>javac</command> command should automatically set up this parameter correctly.</para></listitem>
        <listitem><para>Similarly, the <firstterm>compiler JVM class path</firstterm> is the location of additional libraries and classes used to <emphasis>run</emphasis> the compiler.  Typically, the classes implementing the compiler are found in a <filename>tools.jar</filename> file, and that jar file will need to be on the compiler JVM class path.  Again, there need not be any relationship between this value and the compilation class path.  And the <command>javac</command> command will automatically set this correctly.</para></listitem>
      </itemizedlist></para>
    </section>
      
  </section>
  
  <section id="javadoc">
    <title><command>javadoc</command></title>
    <para>[TODO]</para>
    <!-- We can point to the <link linkend="installJDK">JDK installation instructions</link> for installation details -->
  </section>
  
  <section id="rmi">
    <title>RMI</title>
    <para>[TODO]</para>
    <!-- We can point to the <link linkend="installJDK">JDK installation instructions</link> for installation details -->
  </section>
  
  <section id="jpda">
    <title>JPDA</title>
    <para>[TODO]</para>
    <!-- We can point to the <link linkend="installJDK">JDK installation instructions</link> for installation details -->
  </section>
  
  <section id="subversion">
    <title>Subversion</title>
    <para>[TODO]</para>
    <!-- We can point to the <link linkend="installSubversion">Subversion installation instructions</link> for installation details -->
    <!-- Should include instructions on moving and adding files, and on tagging and branching -->
    <!-- Clipped from the previous docs:
              <para>If you will be adding new files as part of your commit, you will need to first let the CVS server know that the new files exist.  Run "<literal>cvs add [FILE]</literal>" for each new file that you will be adding before running <literal>ant commit</literal>.  Also, it is very important that you copy the license comment from another file into your new file.  We also prefer that you include a "<literal>@version &#36;Id&#36;</literal>" tag in your class-level Javadoc comment, which helps us note the last time the file was modified.</para>
-->
  </section>
  
  <section id="ant">
    <title>Ant</title>
    <para>[TODO]</para>
    <!-- We can point to the <link linkend="installAnt">Ant installation instructions</link> for installation details -->
  </section>
  
  <section id="junit">
    <title>JUnit</title>
    <para>[TODO]</para>
    <!-- We can point to the <link linkend="installJUnit">JUnit installation instructions</link> for installation details -->
  </section>
  
  <section id="SourceForge">
    <title>SourceForge</title>
    <para>[TODO]</para>
  </section>
  
  <section id="clover">
    <title>Clover</title>
    <para>[TODO]</para>
  </section>
  
  <section id="retroweaver">
    <title>Retroweaver</title>
    <para>[TODO]</para>
  </section>
  
  <section id="docbook">
    <title>DocBook</title>
    <para>[TODO]</para>
    <!-- Clipped from the previous docs:
    Beware that some versions of these tools may not work with our build script or may generate HTML files without an <filename>index.html</filename> file.  (If this is the case, as it is currently on the greenland server, you'll probably want to copy <filename>book1.html</filename> to <filename>index.html</filename>.  Don't just rename it, because other files will link to the old one.)
    -->
  </section>
  
  <section id="javacc">
    <title>JavaCC</title>
    <para>[TODO]</para>
  </section>
  
  <section id="bcel">
    <title>BCEL</title>
    <para>[TODO]</para>
  </section>
  
  <section id="otherTools">
    <title>Other Useful Development Tools</title>
    <para>[TODO]</para>
    
    <section id="findbugs">
      <title>FindBugs</title>
      <para>[TODO]</para>
    </section>
  
    <section id="x11">
      <title>X11</title>
      <para>[TODO]</para>
      <!-- This can contain tips and guidance on building remotely using X11 -->
      <!-- Clipped from the previous docs:
        <para>If you are running the tests on Windows over an SSH connection to a Unix server, you will need to have an X server running (such as X-Win32), and you will need to enable "X11 Tunneling" in the preferences of your SSH client.  This is because Swing components will be created in the tests, which require an X server even if they are not explicitly shown.</para>
        -->

    </section>

    <section id="eclipse">
      <title>Eclipse</title>
      <para>[TODO]</para>
      <!-- This can contain tips on how to use some of Eclipse's features - how to use it as the IDE, taking advantage of its extensive compiler warnings, etc. -->
    </section>
    
  </section>
  
</chapter>

