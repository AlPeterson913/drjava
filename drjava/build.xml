<!-- DrJava Build Script -->

<!-- This build script is based on the template located at "trunk/misc/build-template.xml"
     in the DrJava Subversion repository.  In general, changes made to the script should be
     reflected in the template as well. -->
     
<project name="drjava" default="help">

  <!-- Extension containing various tools, including "for" and "if" -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="lib/buildlib/ant-contrib.jar"/>

  <!-- Check if a property file has been specified, and if so, load it -->
  <!-- The following is is a no-op if drjava-props has been set on the
       command line or ANT_ARGS environment variable -->
  <property name="drjava-props" value=""/>
  <if>
    <not>
      <equals arg1="${drjava-props}" arg2=""/>
    </not>
    <then>
      <!-- drjava-props has been set, make sure the file exists -->
      <available property="drjava-props-exists" file="${drjava-props}"/>
      <fail message="Can't find property file ${drjava-props}." unless="drjava-props-exists" />
      <!-- Load the property file -->
      <!-- <echo message="Loading property file ${drjava-props}." /> -->
      <property file="${drjava-props}"/>
    </then>
  </if>

  <property name="readable-project-name" value="DrJava" />
  <property name="src-working-dir" value="src/edu/rice/cs/drjava" />
  <property name="main-class" value="edu.rice.cs.drjava.DrJava" />
  <property name="svn-repository" value="https://drjava.svn.sourceforge.net/svnroot/drjava" />

  <property environment="env" />
  <property name="java14-home" value="${env.JAVA14_HOME}" />
  <property name="clover-jar" value="${env.CLOVER_JAR}" />
  
  <!-- Default settings for properties -->
  <!-- If test-halt is set to true, testing will stop after the first
       failure; if it's set to false, then all unit tests will be run. -->
  <property name="test-halt" value="false" />
  <property name="test-spec" value="" />
  <property name="test-repeat" value="1" />
  <property name="test-timeout" value="1440" />
  <property name="test-formatter" value="oneline" />
  <property name="test-output-to-file" value="false" />
  <property name="clean-can-fail" value="yes" /> 
  <property name="force-server" value="no" />
  <property name="plt.debug.log" value="void" />
  <property name="plt.error.log" value="popup" />
  
  <property name="is-development" value="yes" /> <!-- Development or stable release -->
  <property name="tag-append" value="" /> <!-- "stable", "beta", or none -->
  
  <!-- Don't use or inherit the CLASSPATH environment variable for anything -->
  <property name="build.sysclasspath" value="ignore" />
  
  <fileset id="libs" dir="lib" includes="*.jar" /> <!-- Only include jars that are at the top level (not in buildlib) -->
  
  <!-- Retroweaver task, used to convert Java 5.0 class files to be compatible with an earlier JVM;
       also checks class references to insure that there are no dependencies on 1.5 APIs -->
  <taskdef name="retroweaver" classpath="lib/buildlib/retroweaver-all-1.2.3.jar" 
           classname="com.rc.retroweaver.ant.RetroWeaverTask" />
  
  <!-- Extension that defines the "extendclasspath" task.  This should be a standard feature of Ant, but
       as long as it's not, we can use this extension from the Clover developers. -->
  <taskdef resource="com/cenqua/ant/antlib.xml" classpath="lib/buildlib/cenquatasks.jar" />

  <!-- fornum task, used for test-repeat -->
  <taskdef name="fornum" classname="edu.rice.cs.plt.ant.ForNumTask" classpath="lib/buildlib/plt-ant.jar" onerror="report"/>

  <extendclasspath path="lib/buildlib/junit.jar" />
                 
  <!-- ***********
       Help Target
       *********** -->
  
  <target name="help" description="Print general build script information">
    <echo message="--------------------------------------------------------------------" />
    <echo message="${readable-project-name} Build Scripts" />
    <echo message="--------------------------------------------------------------------" />
    <echo message="Type 'ant -projecthelp' or 'ant -p' to see the list of targets." />
    <echo message="" />
    <echo message="The following properties may be defined (using '-Dname=value') for" />
    <echo message="custom behavior:" />
    <echo message="" />
    <echo message="drjava-props: An external properties file that is loaded at the" />
    <echo message="              beginning of the Ant session. The file should be" />
    <echo message="              a plain text file with 'name=value' pairs, one per" />
    <echo message="              line. They work the same was as the properties" />
    <echo message="              specified on the command line using '-Dname=value'." />
    <echo message="test-drjava-config: Specifies which DrJava configuration file is used" />
    <echo message="                    during tests (by setting the 'test.drjava.config'" />
    <echo message="                    property. This is effective only during unit tests" />
    <echo message="                    and is the equivalent to the '-config' command" />
    <echo message="                    line option. If this option is not used, then the" />
    <echo message="                    testFiles/drjava.basic.config file is used." />
    <echo message="test-spec: A matching string to filter the tests to be run; may" />
    <echo message="           be comma-delimited to run multiple test sets." />
    <echo message="           (Default: empty string)" />
    <echo message="test-timeout: A time limit (in minutes) for running a test set." />
    <echo message="              (Default: 1440)" />
    <echo message="test-repeat: The number (>=1) of times the tests should be repeated." />
    <echo message="test-formatter: The kind of formatter to use for test results:" />
    <echo message="                one of 'quiet', 'oneline', 'brief', 'plain', or" />
    <echo message="                'xml'. (Default: oneline)" />
    <echo message="test-halt: Set to 'true' to make unit testing stop after the" />
    <echo message="           first failure; default is 'false', which runs all" />
    <echo message="           unit tests, even after failures or errors have occurred." />
    <echo message="clean-can-fail: Whether the failure of a 'clean' operation can halt" />
    <echo message="                the build. (Default: yes)" />
    <echo message="force-server: Whether the '-server' option should always be used when" />
    <echo message="              running or testing. (Default: no)" />
    <echo message="plt.debug.log: System property used to initialize the debug log when" />
    <echo message="               running or testing. (Default: void)" />
    <echo message="plt.error.log: System property used to initialize the error log when" />
    <echo message="               running or testing. (Default: popup)" />
    <echo message="" />
    <echo message="For this build file to function properly, the following environment " />
    <echo message="variables should be defined:" />
    <echo message="JAVA14_HOME: Home folder of the Java 1.4 JRE or J2SDK" />
    <echo message="PATH: 'svn' needs to refer to the Subversion client executable" />
    <echo message="CLOVER_JAR: Location of the Clover jar file (necessary only if " />
    <echo message="            Clover targets will be used)"/>
    <echo message="" />
    <echo message="Additionally, Ant must be run under Java 5.0 or later.  If that is " />
    <echo message="not the system default, it may be set for Ant by using JAVA_HOME." />
    <echo message="Ant may also require ANT_HOME to be set.  Note that the value of " />
    <echo message="CLASSPATH will be ignored -- classes on the system classpath will " />
    <echo message="not be visible during the build process." />
  </target>
  
  
  <!-- ************
       Build Target
       ************ -->
  
  <target name="build" depends="test-14-in-15, jar-14" 
          description="Shortcut for 'test-14-in-15' and 'jar-14'">
  </target>
  

  <!-- *************************
       Source-generating Targets
       ************************* -->
       
  <property name="code-status-source" value="${src-working-dir}/CodeStatus.orig" />
  <property name="code-status-target" value="${src-working-dir}/CodeStatus.java" />
  <property name="version-source" value="${src-working-dir}/Version.orig" />
  <property name="version-target" value="${src-working-dir}/Version.java" />

  <target name="generate-source" depends="resolve-development-value, resolve-version-tag" 
          description="Generate the CodeStatus and Version source files">
    <filter token="DEVELOPMENT" value="${development-value}" />
    <filter token="DATE" value="${DSTAMP}" />
    <filter token="TIME" value="${TSTAMP}" />
    <echo message="Processing ${code-status-source}" />
    <copy file="${code-status-source}" tofile="${code-status-target}" filtering="yes" />
    <echo message="Processing ${version-source}" />
    <copy file="${version-source}" tofile="${version-target}" filtering="yes" />
    <!-- Any additional files to be generated may be processed here -->
  </target>
  
  <!-- Matches source files that are generated.  Search is relative to the base directory
       (NOT "src", since "src-working-dir" is defined relative to the base).  This is used 
       by "clean". -->
  <patternset id="generated-sources">
    <include name="${code-status-target}" />
    <include name="${version-target}" />
    <!-- Additional generated sources should be listed here -->
  </patternset>

  
  <!-- *******************
       Compilation Targets
       ******************* -->
       
  <target name="compile" depends="compile-15" description="Shortcut for 'compile-15'">
  </target>
  
  <target name="compile-15" depends="generate-source, check-rmi-compile, do-compile, rmi-compile, copy-resources, unjar-libs"
          description="Compile all source files (after generating the source)">
  </target>
  
  <target name="do-compile" depends="assert-15, resolve-java15-tools">
  
    <echo message="Compiling src directory to classes/base and classes/test" />
    
    <mkdir dir="classes/base" />
    <mkdir dir="classes/test" />
    
    <!-- Move any test classes back to base to prevent recompilation -->
    <move todir="classes/base">
      <fileset dir="classes/test" />
    </move>
    
    <javac srcdir="src" destdir="classes/base" source="1.5" target="1.5" sourcepath="" 
           debug="on" optimize="off" deprecation="on" includeAntRuntime="no" fork="yes">
      <classpath>
        <!-- TODO: Remove this dependency on tools.jar by refactoring and moving all the dependent
             debugger code into the "platform" module -->
        <pathelement location="${java15-tools}" />
        <fileset refid="libs" />
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="classes/base" />
      </classpath>
      <compilerarg value="-Xlint" />
      <!-- Ignore serial warnings, because they occur for every Throwable definition (among others) -->
      <compilerarg value="-Xlint:-serial" /> 
      <!-- Use the next line to compile against other sources, ignoring any unneeded classes.
           This can be useful in creating a pruned version of a jar file for the lib directory.
           (You must also clear the sourcepath="" option.)
      <include name="${src-working-dir}/**/*.java" /> -->
    </javac>
    
    <move todir="classes/test">
      <fileset dir="classes/base">
        <include name="**/*Test.class" />
        <include name="**/*Test$*.class" />
        <include name="**/*TestCase.class" />
        <include name="**/*TestCase$*.class" />
        <!-- Additional test classes should be listed here -->
      </fileset>
    </move>
    
  </target>
  
  
  <!-- Matches base class files that should be RMI compiled.  Search is relative to "classes/base". -->
  <patternset id="rmi-base-classes">
    <include name="edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.class" />
    <include name="edu/rice/cs/drjava/model/repl/newjvm/MainJVM.class" />
    <!-- Additional base RMI classes should be listed here -->
  </patternset>
  
  <!-- Matches test class files that should be RMI compiled.  Search is relative to "classes/test". -->
  <patternset id="rmi-test-classes">
    <include name="edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest$TestMasterJVM.class" />
    <include name="edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest$CounterSlave.class" />
    <!-- Additional test RMI classes should be listed here -->
  </patternset>
  
  <!-- This check has to happen *before* do-compile; otherwise, the rmi class files will
       always be up to date -->
  <target name="check-rmi-compile">
    <condition property="rmi-classes-uptodate">
      <and>
        <available file="classes/base" type="dir" />
        <available file="classes/test" type="dir" />
        <not>
          <or>
            <!-- If a source is "up to date" with respect to its class file
                (reversing the usual order), the class file is out of date.  This
                allows for a one-to-many relationship between a source and its classes.  -->
            <uptodate>
              <srcfiles dir="classes/base">
                <patternset refid="rmi-base-classes" />
              </srcfiles>
              <!-- Regular expression copied from the Ant manual; they say it maps from
                   classes to their sources -->
              <mapper type="regexp" from="^(.*?)(\$$[^/\\\.]*)?\.class$$" to="\1.java" />
            </uptodate>
            <uptodate>
              <srcfiles dir="classes/test">
                <patternset refid="rmi-test-classes" />
              </srcfiles>
              <mapper type="regexp" from="^(.*?)(\$$[^/\\\.]*)?\.class$$" to="\1.java" />
            </uptodate>
          </or>
        </not>
      </and>
    </condition>
  </target>
  
  <target name="rmi-compile" depends="check-rmi-compile, resolve-java15-tools" unless="rmi-classes-uptodate">
    <echo message="Compiling RMI classes" />
    <rmic base="classes/base" includeAntRuntime="no">
      <patternset refid="rmi-base-classes" />
      <classpath>
        <pathelement location="${java15-tools}" />
        <fileset refid="libs" />
        <pathelement location="classes/base" />
      </classpath>
    </rmic>
    <rmic base="classes/test" includeAntRuntime="no">
      <patternset refid="rmi-test-classes" />
      <classpath>
        <pathelement location="${java15-tools}" />
        <fileset refid="libs" />
        <pathelement location="classes/base" />
        <pathelement location="classes/test" />
      </classpath>
    </rmic>
  </target>
  
  
  <target name="copy-resources">
    <copy todir="classes/base">
      <fileset dir="src">
        <include name="**/LICENSE" />
        <include name="**/README" />
        <include name="**/*.gif" />
        <include name="**/*.png" />
        <include name="**/*.jpg" />
        <include name="**/*.jpeg" />
        <include name="**/*.properties" />
        <!-- Additional resource files should be listed here -->
      </fileset>
    </copy>
  </target>
  
  
  <target name="unjar-libs">
    <antcall target="do-unjar-libs">
      <param name="generate-sourcedir" value="lib" />
      <param name="generate-dir" value="classes/lib" />
    </antcall>
  </target>
  
  <target name="do-unjar-libs" depends="check-generate-dir-from-dir" unless="already-generated">
    <echo message="Unjarring jar files in the lib directory" />
    <!-- Delete "classes/lib" in case it exists (but is out of date) -->
    <delete dir="classes/lib" />
    <mkdir dir="classes/lib" />
    <unjar dest="classes/lib">
      <fileset refid="libs" />
      <patternset excludes="META-INF/**" />
    </unjar>
  </target>
  
  
  <target name="compile-14" depends="compile-15, resolve-java14-runtime, resolve-java14-tools"
          description="Create 1.4 versions of the classes (after compiling)">
    <!-- Note: This target, in addition to checking 1.4 compatibility, serves to ensure that there are no dependencies
         on test classes or JUnit classes in the base.  If 1.4 compatibility is no longer needed, a similar dependency
         check should probably still be done. -->
    <echo message="Generating 1.4 versions of the classes directories (this may take awhile after a large compile)" />
    
    <!-- Convert lib classes -->
    <mkdir dir="classes/lib-14" />
    <retroweaver srcdir="classes/lib" destdir="classes/lib-14" target="1.4" verify="no" />
    <copy todir="classes/lib-14">
      <fileset dir="classes/lib" excludes="**/*.class" />
    </copy>
    
    <!-- Convert base classes -->
    <mkdir dir="classes/base-14" />
    <pathconvert property="retroweaver-base-classpath" dirsep="${file.separator}" pathsep="${path.separator}">
      <path>
        <pathelement location="${java14-runtime}" />
        <pathelement location="${java14-tools}" />
        <pathelement location="${clover-jar}" />
        <pathelement location="classes/base-14" />
        <pathelement location="classes/lib-14" />
      </path>
    </pathconvert>
    <retroweaver srcdir="classes/base" destdir="classes/base-14" target="1.4" verify="yes"
                 classpath="${retroweaver-base-classpath}" />
    <copy todir="classes/base-14">
      <fileset dir="classes/base" excludes="**/*.class" />
    </copy>
                 
    <!-- Convert test classes -->
    <mkdir dir="classes/test-14" />
    <pathconvert property="retroweaver-test-classpath" dirsep="${file.separator}" pathsep="${path.separator}">
      <path>
        <pathelement location="${java14-runtime}" />
        <pathelement location="${java14-tools}" />
        <pathelement location="${clover-jar}" />
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="classes/base-14" />
        <pathelement location="classes/lib-14" />
        <pathelement location="classes/test-14" />
      </path>
    </pathconvert>
    <!-- We do not check references here, thus allowing 1.5 references in test classes -->
    <retroweaver srcdir="classes/test" destdir="classes/test-14" target="1.4" verify="no" />
    <copy todir="classes/test-14">
      <fileset dir="classes/test" excludes="**/*.class" />
    </copy>
    
  </target>


  <!-- ***************
       Testing Targets
       *************** -->
  
  <target name="test" depends="test-15" description="Shortcut for 'test-15'">
  </target>

  <target name="test-15" depends="compile-15"
          description="Run all 5.0 tests under Java 5.0 (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="do-test-target" value="do-test-15" />
    </antcall>
  </target>
  
  <target name="test-14" depends="compile-14"
          description="Run all 1.4 tests under Java 1.4 (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="do-test-target" value="do-test-14" />
    </antcall>
  </target>
  
  <target name="test-14-in-15" depends="compile-14, assert-15"
          description="Run all 1.4 tests under Java 5.0 (after compiling); use -Dtest-spec=... to filter">
    <antcall target="iterate-tests">
      <param name="do-test-target" value="do-test-14-in-15" />
    </antcall>
  </target>
  
  <target name="iterate-tests">
    <!-- Repeat tests 'test-repeat' times. -->
    <fornum count="${test-repeat}" param="iteration"><sequential>
      <!-- Unless 'test-repeat' is '1', output a status message stating the
           current iteration and the total number of iterations. -->
      <if>
        <not>
          <equals arg1="${test-repeat}" arg2="1"/>
        </not>
        <then>
          <!-- Add 1 to iteration number. -->
          <math result="iteration1" operand1="@{iteration}" operation="+" operand2="1" datatype="int"/>
          <!-- Output message. -->
          <echo message="Running iteration ${iteration1} of ${test-repeat}..."/>
        </then>
      </if>
      <if>
        <equals arg1="${test-spec}" arg2="" />
        <then>
          <limit minutes="${test-timeout}" failonerror="true">
            <antcall target="${do-test-target}">
              <param name="test-filter-string" value="" />
            </antcall>
          </limit>
        </then>
        <else>
          <for list="${test-spec}" param="test-filter-string-attribute">
            <sequential>
              <limit minutes="${test-timeout}" failonerror="true">
                <antcall target="${do-test-target}">
                  <param name="test-filter-string" value="@{test-filter-string-attribute}" />
                </antcall>
              </limit>
            </sequential>
          </for>
        </else>
      </if>
    </sequential></fornum>
  </target>
  
  <selector id="tests-to-run">
    <and>
      <filename name="**/*${test-filter-string}*/**" />
      <filename name="**/*Test.class" />
    </and>
  </selector>
 
  <target name="do-test-15"
          depends="assert-15, resolve-java15-tools, resolve-jvm-args, resolve-test-formatter-class">
    <echo message="Running all 5.0 tests matching '${test-filter-string}' under Java 5.0" />
    <junit haltonfailure="${test-halt}"
	   failureproperty="do-test-15-failed"
	   fork="yes"
	   forkmode="perTest"
	   maxmemory="256M"
 	   dir="${basedir}">
      <classpath>
        <pathelement location="${java15-tools}" />
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="lib/buildlib/plt-ant.jar" /> <!-- required for custom formatter -->
        <pathelement location="${clover-jar}" />
        <pathelement location="classes/test" />
        <pathelement location="classes/base" />
        <pathelement location="classes/lib" />
      </classpath>
      <assertions>
        <enable />
      </assertions>
      <syspropertyset>
        <propertyref prefix="plt." />
      </syspropertyset>
      <jvmarg line="${jvm-args}" />
      <formatter classname="${test-formatter-class}" usefile="${test-output-to-file}" />
      <batchtest>
        <fileset dir="classes/test">
          <selector refid="tests-to-run" />
        </fileset>
      </batchtest>
    </junit>
    <fail if="do-test-15-failed" message="One or more unit tests failed."/>
  </target>

  <target name="do-test-14"
          depends="resolve-java14-exec, resolve-java14-tools, resolve-jvm-args, resolve-test-formatter-class">
    <echo message="Running all 1.4 tests matching '${test-spec}' under Java 1.4" />
    <echo message="WARNING: 1.4-compatible test classes are (intentionally) not checked for Java 5 API references." />
    <echo message="If such references exist, these tests will probably fail." />
    <junit haltonfailure="${test-halt}"
	   failureproperty="do-test-14-failed"
	   fork="yes"
	   forkmode="perTest"
	   maxmemory="256M"
	   jvm="${java14-exec}"
	   dir="${basedir}">
      <classpath>
        <pathelement location="${java14-tools}" />
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="lib/buildlib/plt-ant.jar" /> <!-- required for custom formatter -->
        <pathelement location="${clover-jar}" />
        <pathelement location="classes/test-14" />
        <pathelement location="classes/base-14" />
        <pathelement location="classes/lib-14" />
      </classpath>
      <assertions>
        <enable />
      </assertions>
      <syspropertyset>
        <propertyref prefix="plt." />
      </syspropertyset>
      <jvmarg line="${jvm-args}" />
      <formatter classname="${test-formatter-class}" usefile="false" />
      <batchtest>
        <fileset dir="classes/test-14">
          <selector refid="tests-to-run" />
        </fileset>
      </batchtest>
    </junit>
     <fail if="do-test-14-failed" message="One or more unit tests failed."/>
  </target>

  <target name="do-test-14-in-15"
          depends="assert-15, resolve-java15-tools, resolve-jvm-args, resolve-test-formatter-class">
    <echo message="Running all 1.4 tests matching '${test-spec}' under Java 5.0" />    
    <junit haltonfailure="${test-halt}"
	     failureproperty="do-test-14-in-15-failed"
	     fork="yes"
	     forkmode="perTest"
	     maxmemory="256M"
	     dir="${basedir}">
      <classpath>
        <pathelement location="${java15-tools}" />
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="lib/buildlib/plt-ant.jar" /> <!-- required for custom formatter -->
        <pathelement location="${clover-jar}" />
        <pathelement location="classes/test-14" />
        <pathelement location="classes/base-14" />
        <pathelement location="classes/lib-14" />
      </classpath>
      <assertions>
        <enable />
      </assertions>
      <syspropertyset>
        <propertyref prefix="plt." />
      </syspropertyset>
      <jvmarg line="${jvm-args}" />
      <formatter classname="${test-formatter-class}" usefile="false" />
      <batchtest>
        <fileset dir="classes/test-14">
          <selector refid="tests-to-run" />
        </fileset>
      </batchtest>
    </junit>
    <fail if="do-test-14-in-15-failed" message="One or more unit tests failed."/>
  </target>


  <target name="run" depends="run-15" description="Shortcut for 'run-15'">
  </target>
  
  <target name="run-15" depends="compile-15, assert-15, resolve-java15-tools, resolve-jvm-args"
          description="Run the main class (5.0 version) under Java 5.0 (after compiling)">
    <echo message="Running the DrJava application (5.0 classes in Java 5.0)" />
    <java classname="${main-class}" fork="yes" spawn="yes">
      <classpath>
        <pathelement location="${java15-tools}" />
        <pathelement location="classes/base" />
        <pathelement location="classes/lib" />
      </classpath>
      <assertions>
        <enable />
      </assertions>
      <syspropertyset>
        <propertyref prefix="plt." />
      </syspropertyset>
      <jvmarg line="${jvm-args}" />
    </java>
  </target>
        
  <target name="run-14" depends="compile-14, resolve-java14-exec, resolve-java14-tools, resolve-jvm-args"
          description="Run the main class (1.4 version) under Java 1.4 (after compiling)">
    <echo message="Running the DrJava application (1.4 classses in Java 1.4)" />
    <java classname="${main-class}" jvm="${java14-exec}" fork="yes" spawn="yes">
      <classpath>
        <pathelement location="${java14-tools}" />
        <pathelement location="classes/base-14" />
        <pathelement location="classes/lib-14" />
      </classpath>
      <assertions>
        <enable />
      </assertions>
      <syspropertyset>
        <propertyref prefix="plt." />
      </syspropertyset>
      <jvmarg line="${jvm-args}" />
    </java>
  </target>
        
  <target name="run-14-in-15" depends="compile-14, assert-15, resolve-java15-tools, resolve-jvm-args"
          description="Run the main class (1.4 version) under Java 5.0 (after compiling)">
    <echo message="Running the DrJava application (1.4 classses in Java 5.0)" />
    <java classname="${main-class}" fork="yes" spawn="yes">
      <classpath>
        <pathelement location="${java15-tools}" />
        <pathelement location="classes/base-14" />
        <pathelement location="classes/lib-14" />
      </classpath>
      <assertions>
        <enable />
      </assertions>
      <syspropertyset>
        <propertyref prefix="plt." />
      </syspropertyset>
      <jvmarg line="${jvm-args}" />
    </java>
  </target>
        

  <!-- ***********
       Jar Targets
       *********** -->
       
  <target name="jar" depends="jar-15" description="Shortcut for 'jar-15'" />
  
  <target name="jar-15" depends="compile-15, resolve-version-tag" 
          description="Create the 5.0 jar file with all classes and libs (compiling first)">
    <jar jarfile="${ant.project.name}-15.jar">
      <manifest>
        <attribute name="Main-Class" value="${main-class}" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/lib" />
      <fileset dir="classes/base" />
    </jar>
  </target>

  <target name="jar-base-15" depends="compile-15, resolve-version-tag" 
          description="Create the 5.0 jar file without any support libs (compiling first)">
    <jar jarfile="${ant.project.name}-base-15.jar">
      <manifest>
        <attribute name="Main-Class" value="${main-class}" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/base" />
    </jar>
  </target>

  <target name="jar-14" depends="compile-14, resolve-version-tag" 
          description="Create the 1.4 jar file with all classes and libs (compiling first)">
    <jar jarfile="${ant.project.name}.jar">
      <manifest>
        <attribute name="Main-Class" value="${main-class}" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/lib-14" />
      <fileset dir="classes/base-14" />
    </jar>
  </target>

  <target name="jar-base-14" depends="compile-14, resolve-version-tag" 
          description="Create the 1.4 jar file without any support libs (compiling first)">
    <jar jarfile="${ant.project.name}-base-14.jar">
      <manifest>
        <attribute name="Main-Class" value="${main-class}" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/base-14" />
    </jar>
  </target>


  <!-- *********************
       Documentation Targets
       ********************* -->
  
  <target name="javadoc" depends="generate-source, assert-15, resolve-java15-tools, resolve-version-tag"
          description="Generate javadocs from the source folder (after generating the source)">
    <antcall target="do-javadoc">
      <param name="generate-sourcedir" value="src" />
      <param name="generate-dir" value="docs/javadoc" />
    </antcall>
  </target>
  
  <target name="do-javadoc" depends="check-generate-dir-from-dir" unless="already-generated">
    <echo message="Generating javadocs" />
    <delete dir="docs/javadoc" />
    <mkdir dir="docs/javadoc" />
    <javadoc sourcepath="src" packagenames="*" destdir="docs/javadoc"
             access="protected" Use="yes" Version="yes" Author="yes" Windowtitle="${readable-project-name} API (${version-tag})">
      <classpath>
        <pathelement location="${java15-tools}" />
        <fileset refid="libs" />
        <pathelement location="lib/buildlib/junit.jar" />
      </classpath>
      <link href="http://java.sun.com/j2se/1.5/docs/api" />
      <link href="http://junit.org/junit/javadoc/3.8.1" />
      <link href="http://drjava.org/javadoc/plt" />
      <link href="http://drjava.org/javadoc/javalanglevels" />
      <link href="http://drjava.org/javadoc/dynamicjava" />
      <!-- Additional external library APIs may be listed here -->
    </javadoc>
  </target>
  
  
  <target name="clover" depends="clover-15" description="Shortcut for 'clover-15'">
  </target>
  
  <target name="clover-15" depends="clean, setup-clover, test-15, report-clover" 
          description="Generate a Clover test coverage report (using 'test-15')" />
  
  <target name="clover-14" depends="clean, setup-clover, test-14, report-clover" 
          description="Generate a Clover test coverage report (using 'test-14')" />
  
  <target name="clover-14-in-15" depends="clean, setup-clover, test-14-in-15, report-clover" 
          description="Generate a Clover test coverage report (using 'test-14-in-15')" />
  
  <target name="report-clover" depends="resolve-version-tag">
    <echo message="Generating Clover report" />
    <clover-report>
      <current outfile="docs/clover" title="${readable-project-name} Test Coverage (${version-tag})">
        <format type="html" />
      </current>
    </clover-report>
    <antcall target="clean-intermediate"> <!-- Remove instrumented class files -->
      <param name="clean-can-fail" value="no" />
    </antcall>
  </target>

  <target name="setup-clover" depends="assert-clover-jar-exists">
    <extendclasspath path="${clover-jar}" />
    <taskdef resource="clovertasks" classpath="${clover-jar}" />
    <mkdir dir="cloverdb" />
    <clover-setup initString="cloverdb/clover.db">
      <files>
        <exclude name="**/*Test.java" />
        <exclude name="**/*TestCase.java" />
        <!-- Additional test sources should be listed here -->
      </files>
    </clover-setup>
  </target>
  
  
  <target name="benchmark">
    <antcall target="test">
      <param name="test-formatter" value="xml" />
      <param name="test-output-to-file" value="yes" />
    </antcall>
    <mkdir dir="docs/benchmark/current" />
    <move todir="docs/benchmark/current">
      <fileset dir="${basedir}">
        <include name="TEST*" />
      </fileset>
    </move>
    
    <mkdir dir="benchmark-sources" />
    
    <exec executable="svn" failonerror="yes">
      <arg value="checkout" />
      <arg value="${svn-repository}/trunk/${ant.project.name}" />
      <arg value="benchmark-sources" />
    </exec>
    <!-- Change the build script text for builds that don't support test-output-to-file -->
    <replaceregexp file="benchmark-sources/build.xml" flags="g"
                   match="&lt;formatter.*usefile=&quot;false&quot;.*/&gt;"
                   replace="&lt;formatter type=&quot;xml&quot; usefile=&quot;true&quot;/&gt;" />
    <ant dir="benchmark-sources" target="test">
      <property name="test-formatter" value="xml" />
      <property name="test-output-to-file" value="yes" />
    </ant>
    <ant dir="benchmark-sources" target="clean" />
    <exec executable="svn" dir="benchmark-sources" failonerror="yes">
      <arg value="revert" />
      <arg value="build.xml" />
    </exec>
    <mkdir dir="docs/benchmark/head" />
    <move todir="docs/benchmark/head">
      <fileset dir="benchmark-sources">
        <include name="TEST*" />
      </fileset>
    </move>
    
    <exec executable="svn" dir="benchmark-sources" failonerror="yes">
      <arg value="update" />
      <arg value="--revision" />
      <arg value="PREV" />
    </exec>
    <!-- Change the build script text for builds that don't support test-output-to-file -->
    <replaceregexp file="benchmark-sources/build.xml"
                   match="&lt;formatter.*usefile=&quot;false&quot;.*/&gt;"
                   replace="&lt;formatter type=&quot;xml&quot; usefile=&quot;true&quot;/&gt;" />
    <ant dir="benchmark-sources" target="test">
      <property name="test-formatter" value="xml" />
      <property name="test-output-to-file" value="yes" />
    </ant>
    <ant dir="benchmark-sources" target="clean" />
    <exec executable="svn" dir="benchmark-sources" failonerror="yes">
      <arg value="revert" />
      <arg value="build.xml" />
    </exec>
    <mkdir dir="docs/benchmark/prev1" />
    <move todir="docs/benchmark/prev1">
      <fileset dir="benchmark-sources">
        <include name="TEST*" />
      </fileset>
    </move>
    
    <antcall target="clean-intermediate">
      <param name="clean-can-fail" value="no" />
    </antcall>
    
  </target>

  
  <!-- *************
       Clean Targets
       ************* -->
       
  <target name="clean" depends="clean-intermediate, clean-products"
          description="Remove all build products; the result should match the intended Subversion contents">
  </target>

  <target name="clean-intermediate" unless="skip-clean">
    <echo message="Deleting all intermediate build products" />
    
    <delete dir="classes" failonerror="${clean-can-fail}" />
    <delete dir="cloverdb" failonerror="${clean-can-fail}" />
    <delete dir="benchmark-sources" failonerror="${clean-can-fail}" />

    <delete failonerror="${clean-can-fail}">
      <fileset dir="testFiles">
        <exclude name="**" />
        <!-- Additional test output files should be listed here -->
      </fileset>
    </delete>
    
    <delete includeemptydirs="true" failonerror="${clean-can-fail}">
      <fileset dir="${basedir}">
        <patternset refid="generated-sources" />
      </fileset>
    </delete>
    
    <delete includeemptydirs="true" failonerror="${clean-can-fail}">
      <fileset dir="${basedir}" defaultexcludes="no">
        <include name="src/**/*.class" />
        <!-- We could get rid of backups, but "update" ignores them, so they're okay.
             (doesn't work if defaultexcludes is "yes") -->
        <!-- <include name="**/*~" /> -->
        <!-- Get rid of pesky OS helper files (doesn't work if defaultexcludes is "yes") -->
        <include name="**/.DS_Store" />
        <include name="**/Thumbs.db" />
        <!-- Additional files to delete may be listed here -->
      </fileset>
    </delete>
    
  </target>
    
  <target name="clean-products" unless="skip-clean">
    <echo message="Deleting all final build products" />
    
    <delete dir="docs" failonerror="${clean-can-fail}" />
    
    <delete includeemptydirs="true" failonerror="${clean-can-fail}">
      <fileset dir="${basedir}" defaultexcludes="no">
        <include name="*.jar" />
        <include name="*.zip" />
        <include name="*.tar.gz" />
        <include name="${ant.project.name}-*" />
      </fileset>
    </delete>
  </target>
  

  <!-- ******************
       Subversion Targets 
       ****************** -->
  
  <target name="update" depends="clean" description="Reconcile source with the Subversion archive">
    <echo message="Running Subversion update" />
    <exec executable="svn" failonerror="yes">
      <arg value="update" />
    </exec>
    <exec executable="svn" failonerror="yes">
      <arg value="status" />
    </exec>
  </target>
  
  <target name="commit" depends="update, build" 
          description="Commit source to the Subversion archive (after building)">
    <antcall target="clean-intermediate"> <!-- Clean up after the latest build -->
      <param name="clean-can-fail" value="no" />
    </antcall>
    <exec executable="svn" failonerror="yes">
      <arg value="status" />
    </exec>
    <input message="Please enter a log message for the commit: "
           addproperty="svn-commit-message" />
    <echo message="Running Subversion commit" />
    <exec executable="svn" failonerror="yes">
      <arg value="commit" />
      <arg value="-m" />
      <arg value="${svn-commit-message}" />
    </exec>
  </target>

  <target name="tag" depends="update, resolve-version-tag" 
          description="Copy the working copy to a new Subversion tag (after updating)">
    <echo message="Creating a new Subversion tag with name ${version-tag}"/>
    <exec executable="svn" failonerror="yes">
      <arg value="copy" />
      <arg value="${basedir}" />
      <arg value="${svn-repository}/tags/${version-tag}" />
      <arg value="-m" />
      <arg value="Created tag ${version-tag}" />
    </exec>
  </target>
  
  <target name="branch" depends="update" 
          description="Copy the working copy to a new Subversion branch (after updating)">
    <echo message="This will create a new branch from your working copy.  If there are changes " />
    <echo message="in your copy that have not been committed, you may want to do so first, " />
    <echo message="so that there's a clear branch point for merging later." />
    <input message="Enter a name for the new branch: "
           addproperty="svn-branch-name" />
    <echo message="Creating a new Subversion branch ${svn-branch-name}" />
    <exec executable="svn" failonerror="yes">
      <arg value="copy" />
      <arg value="${basedir}" />
      <arg value="${svn-repository}/branches/${svn-branch-name}" />
      <arg value="-m" />
      <arg value="Created branch ${svn-branch-name}" />
    </exec>
  </target>


  <!-- ***************
       Release Targets
       *************** -->
       
  <target name="release-stable" description="Generate all release files tagged with 'stable'">
    <antcall target="release">
      <param name="tag-append" value="-stable" />
      <param name="is-development" value="no" />
    </antcall>
  </target>

  <target name="release-beta" description="Generate all release files tagged with 'beta'">
    <antcall target="release">
      <param name="tag-append" value="-beta" />
      <param name="is-development" value="no" />
    </antcall>
  </target>
       
  <target name="release"
          depends="update, build, tag, jar-app, mac-app, windows-app, src-zip, javadoc-zip" 
          description="Generate all release files (after building)">
    <delete dir="${version-tag}" />
  </target>
  
  <target name="jar-app" depends="assert-jar-exists, resolve-version-tag">
    <echo message="Creating ${version-tag}.jar" />
    <copy file="${ant.project.name}.jar" tofile="${version-tag}.jar" />
  </target>

  <target name="mac-app" depends="assert-jar-exists, resolve-version-tag">
    <echo message="Creating ${version-tag}-osx.tar.gz" />
    <property name="mac-app-dir" value="${version-tag}/osx" />
    <mkdir dir="${mac-app-dir}" />
    <filter token="VERSION" value="${version-tag}" />
    <copy todir="${mac-app-dir}/${readable-project-name}.app" filtering="yes" >
      <fileset dir="packaging/${readable-project-name}.app" excludes="**/*jar-goes-here" />
    </copy>
    <copy file="${ant.project.name}.jar" 
          todir="${mac-app-dir}/${readable-project-name}.app/Contents/Resources/Java" />
    <tar tarfile="${mac-app-dir}/${version-tag}-osx.tar">
      <tarfileset dir="${mac-app-dir}" includes="${readable-project-name}.app/**"
                  excludes="${readable-project-name}.app/Contents/MacOS/${readable-project-name}" />
      <tarfileset dir="${mac-app-dir}" mode="755"
                  includes="${readable-project-name}.app/Contents/MacOS/${readable-project-name}" />
    </tar>
    <gzip src="${mac-app-dir}/${version-tag}-osx.tar" destfile="${version-tag}-osx.tar.gz" />
  </target>
  
  <target name="windows-app" depends="assert-jar-exists, resolve-version-tag">
    <echo message="Creating ${version-tag}.exe" />
    <concat destfile="${version-tag}.exe" binary="yes">
      <filelist dir="${basedir}">
        <!-- TODO: This should probably include WinExecutor.exe and the icon file
             rather than using the generated WinExecutorFor... -->
        <file name="packaging/WinExecutorFor${readable-project-name}.exe" />
        <file name="${ant.project.name}.jar" />
      </filelist>
    </concat>
  </target>

  <target name="src-zip" depends="resolve-version-tag">
    <echo message="Creating ${version-tag}-src.zip" />
    <exec executable="svn" failonerror="yes">
      <arg value="export" />
      <arg value="${svn-repository}/tags/${version-tag}" />
      <arg value="${version-tag}/src" />
    </exec>
    <zip destfile="${version-tag}-src.zip">
      <zipfileset dir="${version-tag}/src" prefix="${version-tag}/src" />
    </zip>
  </target>
  
  <target name="javadoc-zip" depends="javadoc, resolve-version-tag">
    <echo message="Creating ${version-tag}-javadoc.zip" />
    <zip destfile="${version-tag}-javadoc.zip">
      <zipfileset dir="docs/javadoc" prefix="${version-tag}/javadoc" />
    </zip>
  </target>
  
  <!-- We don't include this in the standard release process, because we don't want to
       include instrumented files in the release, and because Clover must be run on a
       licensed machine -->
  <target name="clover-zip" depends="clover-14-in-15, resolve-version-tag">
    <echo message="Creating ${version-tag}-clover.zip" />
    <zip destfile="${version-tag}-clover.zip">
      <zipfileset dir="docs/clover" prefix="${version-tag}/clover" />
    </zip>
  </target>
  
  
  <!-- ********************************
       Misc Occasionally-Useful Targets
       ******************************** -->
  
  <patternset id="exclude-binaries">
    <exclude name="**/*.jar" />
    <exclude name="**/*.class" />
    <exclude name="**/DrJava" />
    <exclude name="**/*.png" />
    <exclude name="**/*.icns" />
    <exclude name="**/*.gif" />
    <exclude name="**/*.jpg" />
    <exclude name="**/*.jpeg" />
    <!-- Additional binary types may be added here -->
  </patternset>

  <!-- Run a batch find-and-replace on all text files in the project.
       Assumes the properties "find" and "replace" have been defined
       (e.g. "ant -Dfind=foo -Dreplace=bar find-and-replace"). -->
  <target name="find-and-replace">
    <replace dir="${basedir}" token="${find}" value="${replace}" summary="yes">
      <patternset refid="exclude-binaries" />
    </replace>
  </target>
  
  <!-- Standardize all newline character sequences.  Subversion takes care of this 
       automatically, but sometimes files crop up with the wrong sequence.
       Use "svn status" after running this to see which files were fixed. -->
  <target name="fix-newlines" description="Standardize newline character sequences in all text files">
    <!-- If we're in Windows, use \r\n -->
    <condition property="newline-code" value="crlf">
      <os family="windows" />
    </condition>
    <!-- Otherwise, use \n -->
    <property name="newline-code" value="lf" />
    <fixcrlf srcdir="${basedir}" eol="${newline-code}" fixlast="no">
      <patternset refid="exclude-binaries" />
    </fixcrlf>
  </target>
  
  
  <!-- ***************************
       Property-resolution Targets 
       *************************** -->
  
  <target name="resolve-java14-runtime">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java14-runtime will only be set the *first* time. -->

    <property name="java14-runtime-1" location="${java14-home}/lib/rt.jar" />
    <available property="java14-runtime" value="${java14-runtime-1}" file="${java14-runtime-1}" />

    <property name="java14-runtime-2" location="${java14-home}/jre/lib/rt.jar" />
    <available property="java14-runtime" value="${java14-runtime-2}" file="${java14-runtime-2}" />

    <property name="java14-runtime-3" location="${java14-home}/../Classes/classes.jar" />
    <available property="java14-runtime" value="${java14-runtime-3}" file="${java14-runtime-3}" />

    <fail message="Can't find rt.jar in the Java 1.4 home: ${java14-home}" unless="java14-runtime" />
  </target>
  
  <target name="resolve-java14-exec">
    <!-- We rely on "location" to generate a platform-specific path -->

    <property name="java14-exec-1" location="${java14-home}/bin/java.exe" />
    <condition property="java14-exec" value="${java14-exec-1}">
      <and>
        <available file="${java14-exec-1}" />
        <os family="windows" />
      </and>
    </condition>
    
    <property name="java14-exec-2" location="${java14-home}/bin/java" />
    <available property="java14-exec" value="${java14-exec-2}" file="${java14-exec-2}" />

    <fail message="Can't find the java executable in the Java 1.4 home: ${java14-home}" unless="java14-exec" />
  </target>
  
  <target name="resolve-java14-tools">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java15-tools will only be set the *first* time. -->

    <property name="java14-tools-1" location="${java14-home}/lib/tools.jar" />
    <available property="java14-tools" value="${java14-tools-1}" file="${java14-tools-1}" />

    <property name="java14-tools-2" location="${java14-home}/jre/lib/tools.jar" />
    <available property="java14-tools" value="${java14-tools-2}" file="${java14-tools-2}" />

    <property name="java14-tools-3" location="${java14-home}/../Classes/classes.jar" />
    <available property="java14-tools" value="${java14-tools-3}" file="${java14-tools-3}" />

    <fail message="Can't find tools.jar in the Java 1.4 home: ${java14-home}" unless="java14-tools" />
  </target>
  
  <target name="resolve-java15-tools" depends="assert-15">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java15-tools will only be set the *first* time. -->

    <property name="java15-tools-1" location="${java.home}/../lib/tools.jar" />
    <available property="java15-tools" value="${java15-tools-1}" file="${java15-tools-1}" />
    
    <property name="java15-tools-2" location="${java.home}/../Classes/classes.jar" />
    <available property="java15-tools" value="${java15-tools-2}" file="${java15-tools-2}" />
    
    <fail message="Can't find tools.jar in the Java 1.5 home: ${java.home}" unless="java15-tools" />
  </target>
  
  <target name="assert-15">
    <fail message="The specified target requires Ant to be run under Java 5.0 or later">
      <condition>
        <not>
          <or>
            <contains string="${java.version}" substring="1.5." />
            <contains string="${java.version}" substring="1.6." />
          </or>
        </not>
      </condition>
    </fail>
  </target>
    
  <target name="assert-jar-exists">
    <available property="jar-exists" file="${ant.project.name}.jar" />
    <fail message="Can't find ${ant.project.name}.jar" unless="jar-exists" />
  </target>
  
  <target name="assert-clover-jar-exists">
    <available property="clover-jar-exists" file="${clover-jar}" />
    <fail message="${clover-jar} does not exist" unless="clover-jar-exists" />
  </target>
  
  <target name="resolve-development-value">
    <condition property="development-value" value="true">
      <istrue value="${is-development}" />
    </condition>
    <!-- else... -->
    <property name="development-value" value="false" />
  </target>
  
  <target name="resolve-jvm-args">
    <!-- First create individual parts of the 'jvm-args' line; note that the space at
         the end of the strings is necessary to separate the values. -->

    <!-- 'force-server' property -->
    <condition property="jvm-args-force-server" value="-server ">
      <istrue value="${force-server}" />
    </condition>
    <!-- else... -->
    <property name="jvm-args-force-server" value="" />

    <!-- 'test-drjava-config' property -->
    <condition property="jvm-args-test-drjava-config" value="-Dtest.drjava.config=${test-drjava-config} ">
      <isset property="test-drjava-config" />
    </condition>
    <!-- else... -->
    <property name="jvm-args-test-drjava-config" value="-Dtest.drjava.config=${basedir}/testFiles/drjava.basic.config " />

    <!-- Now assemble all arguments; no spaces between the individual arguments so
         arguments not set disappear completely (without multiple spaces inbetween).  -->
    <property name="jvm-args" value="${jvm-args-force-server}${jvm-args-test-drjava-config}" />
  </target>
  
  <target name="resolve-test-formatter-class">
    <condition property="test-formatter-class"
               value="edu.rice.cs.plt.ant.QuietJUnitResultFormatter">
      <equals arg1="quiet" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="edu.rice.cs.plt.ant.OneLineJUnitResultFormatter">
      <equals arg1="oneline" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter">
      <equals arg1="brief" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="org.apache.tools.ant.taskdefs.optional.junit.PlainJUnitResultFormatter">
      <equals arg1="plain" arg2="${test-formatter}" />
    </condition>
    <condition property="test-formatter-class"
               value="org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter">
      <equals arg1="xml" arg2="${test-formatter}" />
    </condition>
    <!-- else... -->
    <property name="test-formatter-class"
              value="edu.rice.cs.plt.ant.OneLineJUnitResultFormatter" />
  </target>
  
  <target name="resolve-version-tag">
    <!-- Get a timestamp based on GMT, rather than local time -->
    <tstamp>
      <format property="DSTAMP" pattern="yyyyMMdd" timezone="GMT" />
      <format property="TSTAMP" pattern="HHmm" timezone="GMT" />
      <format property="TODAY" pattern="MMMM dd yyyy" timezone="GMT" />
    </tstamp>
    <property name="version-tag"
              value="${ant.project.name}${tag-append}-${DSTAMP}-${TSTAMP}" />
  </target>  

  <!-- Sets "already-generated" if "generate-file" is more recent than "generate-sourcefile";
       otherwise, the out-of-date target file is deleted (if it exists).  Note that, since
       properties can only be set once, this should happen underneath an "antcall". -->
  <target name="check-generate-file-from-file">
    <dependset>
      <srcfilelist dir="${basedir}" files="${generate-sourcefile}" />
      <targetfilelist dir="${basedir}" files="${generate-file}" />
    </dependset>
    <available file="${generate-file}" property="already-generated" />
  </target>

  <!-- Sets "already-generated" if "generate-file" is more recent than everything in
       "generate-sourcedir"; otherwise, the out-of-date target file is deleted (if it exists).
        Note that, since properties can only be set once, this should happen underneath an "antcall". -->
  <target name="check-generate-file-from-dir">
    <dependset>
      <srcfileset dir="${generate-sourcedir}" />
      <targetfilelist dir="${basedir}" files="${generate-file}" />
    </dependset>
    <available file="${generate-file}" property="already-generated" />
  </target>

  <!-- Sets "already-generated" if "generate-dir" was created (or modified) more recently 
       than "generate-sourcefile".  Note that, since properties can only be set once, this 
       should happen underneath an "antcall". -->
  <target name="check-generate-dir-from-file">
    <uptodate property="already-generated" targetfile="${generate-dir}" srcfile="${generate-sourcefile}" />
  </target>
  
  <!-- Sets "already-generated" if "generate-dir" was created (or modified) more recently 
       than everything in "generate-sourcedir".  Note that, since properties can only be 
       set once, this should happen underneath an "antcall". -->
  <target name="check-generate-dir-from-dir">
    <!-- Unfortunately, a bug in uptodate prevents this from working properly,
         so we just have to equate *existence* with being up to date.
    <uptodate property="already-generated" targetfile="${generate-dir}" >
      <srcfiles dir="${generate-sourcedir}" />
    </uptodate>
    -->
    <available file="${generate-dir}" property="already-generated" />
  </target>


</project>
