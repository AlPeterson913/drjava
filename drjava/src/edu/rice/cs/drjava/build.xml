<!--
  $Header$
-->
<project name="drjava" default="test">
  <!-- This makes the javac task use the GJ compiler. -->
  <property name="build.compiler"
            value="edu.rice.cs.anttools.GJv6CompilerAdapter" />

  <!-- srcroot is the base directory of the source, 4 packages back -->
  <property name="srcroot" value="../../../../" />
  <!-- built is where the compiled classes go -->
  <property name="built" value="${srcroot}/../built/" />
  <!-- projpath is the path from srcroot to the root directory of this project
  -->
  <property name="projpath" value="edu/rice/cs/${ant.project.name}" />

  <property name="jarfile" value="${srcroot}/../drjava2.jar" />
  <property name="manifest" value="manifest" />
  <property name="cvsroot" value="/home/javaplt/.cvsroot" />

  <!-- Init target. All others depend on it. Initialize the directory. -->
  <target name="init">
    <tstamp /> <!-- Ant requires us to make time stamp -->
    <mkdir dir="${built}" /> <!-- Make the built directory -->
  </target>

  <!-- Reconcile source with CVS archive -->
  <target name="update" depends="init">
    <cvs command="update -d" cvsRoot="${cvsroot}" />
  </target>

  <!-- Commit source to CVS archive
       Before doing do, we update our copy with the CVS copy. This ensures that
       if there were any clashes, we have to resolve them now. Then we
       recompile (from scratch) and retest. If this all succeeds, we can commit.

       After committing, we tag the build we just made with the tag
       projectname-date-time.
  -->
  <target name="commit" depends="clean, update, test">
    <cvs command="commit" cvsRoot="${cvsroot}" />
    <tstamp /> <!-- get new time stamp to use for CVS tag -->
    <property name="version-tag"
              value="${ant.project.name}-${DSTAMP}-${TSTAMP}" />
    <cvs command="tag ${version-tag}" cvsRoot="${cvsroot}" quiet="true" />
    <echo message="New version ${version-tag} committed to CVS." />
  </target>

  <!-- Compile -->
  <target name="compile" depends="init">
    <javac srcdir="."
           destdir="${built}" 
           debug="on"
           optimize="off" />
  </target>

  <!-- Unit test -->
  <target name="test" depends="compile">
    <junit printsummary="yes" haltonerror="yes" haltonfailure="yes" fork="no">
      <!-- propogate the same classpath. not sure why it doesn't
           happen by default!
      -->
      <classpath path="${java.class.path}" />

      <!-- Uncomment below to generate more text on console for tests -->
      <!-- <formatter type="plain" usefile="no" /> -->

      <!-- This makes JUnit run all test classes. It figures out which ones
           automatically, without needing AllTests classes.
      -->
      <batchtest>
        <!-- The root of the fileset must be where edu/ is. -->
        <fileset dir="${srcroot}">
          <!-- Include only from projpath to only get classes in this project!
          -->
          <include name="${projpath}/**/*Test.java" />
          <exclude name="**/AllTests.java" />
          <exclude name="**/Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Makes a jar for distribution. No tests are included. -->
  <target name="jar" depends="test">
    <jar jarfile="${jarfile}"
         basedir="${built}"
         excludes="**/*Test.class"
         manifest="${manifest}" />
  </target>

  <!-- Run the program! -->
  <target name="run" depends="test">
    <java classpath="${built}"
          fork="true"
          classname="edu.rice.cs.drjava.MainFrame" />
  </target>

  <!-- Delete all generated files -->
  <target name="clean">
    <delete dir="${built}" />
    <delete file="${jarfile}" />
  </target>
</project>

