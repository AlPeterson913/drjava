<?xml version="1.0"?>

<!DOCTYPE project [
  <!ENTITY build-common SYSTEM "file:../build-common.xml">
]>

<!--
  $Id$
-->
<project name="drjava" default="test">
  
  
  <!-- srcroot is the base directory of the source, 4 packages back -->
  <property name="srcroot" value="${basedir}/../../../.." />

  <!-- built is where the compiled classes go -->
  <property name="built" value="${srcroot}/../built/" />

  <!-- dist is where the packaged jars go -->
  <property name="dist" value="${srcroot}/../dist/" />

  <!-- projpath is the path from srcroot to the root directory of this project
  -->
  <property name="projpath" value="edu/rice/cs/${ant.project.name}" />

  <!-- put a jar in this directory after each commit -->
  <property name="jars_dir" value="/home/javaplt/public_html/drjava/builds" />

  <!-- put new javadoc in this directory after each commit -->
  <property name="public_javadoc_dir" value="/home/javaplt/public_html/javadoc/${ant.project.name}" />

  <!-- put javadoc in this directory if generating private javadoc -->
  <property name="private_javadoc_dir" value="${srcroot}/../javadoc/${ant.project.name}" />

  <!-- put documentation html in this directory -->
  <property name="doc_dir" value="${built}/edu/rice/cs/drjava/docs" />

  <property name="osxtag" value="drjava-osx" />
  <property name="osxdir" value="${srcroot}/../" />
  <property name="jarfile" value="${srcroot}/../drjava.jar" />
  <property name="manifest" value="manifest" />


  <!-- properties for the autocomplete parser generation -->
  <property environment="env" />
  <property name="acparser_path" value="model/autocomplete/parser" />
  <property name="javacc_home"  value="${env.JAVACC_HOME}" />
  <!-- end properties for autocomplete parser generation -->
  
  
  <!-- Sets a flag indicating that code dealing with new features since the 
    last stable release should be enabled and testable.
    Takes effect only after a clean compile -->
  <target name="development">
    <filter token="DEVELOPMENT" value = "true" />
    <copy file="CodeStatus.orig"
          tofile="CodeStatus.java"
          overwrite="yes"
          filtering="yes" />
  </target>

  <!-- Sets a flag indicating that code dealing with new features since the 
    last stable release should not be enabled or testable.
    Takes effect only after a clean compile -->
  <target name="stable">
    <filter token="DEVELOPMENT" value = "false" />
    <copy file="CodeStatus.orig"
          tofile="CodeStatus.java"
          overwrite="yes"
          filtering="yes" />
  </target>


  <!-- include standard build file parts -->
  &build-common;

  <!-- generate jar and javadoc
       Requires version-tag to be set (via command line -Dversion-tag=)
       For example, to release drjava-20020101-0000, you'd type:

       ant -Dversion-tag=drjava-20020101-0000 release
  -->
  <target name="release" if="version-tag" depends="clean,update,compile">
    <delete dir="${dist}/${version-tag}" />
    <mkdir dir="${dist}/${version-tag}" />

    <!-- generate javadoc for the committed version! -->
    <antcall target="generate_javadoc">
      <param name="javadoc_dir" value="${dist}/${version-tag}/javadoc" />
      <param name="javadoc_title" value="${version-tag}" />
    </antcall>

    <zip zipfile="${dist}/${version-tag}-javadoc.zip">
      <fileset dir="${dist}">
        <include name="${version-tag}/javadoc/**" />
      </fileset>
    </zip>

    <delete dir="${dist}/${version-tag}/javadoc" />

    <cvs dest="${dist}/${version-tag}"
         tag="HEAD"
         quiet="yes"
         package="src/edu/rice/cs/drjava src/edu/rice/cs/util src/edu/rice/cs/lib src/edu/rice/cs/LICENSE src/edu/rice/cs/README src/edu/rice/cs/build-common.xml src/src-mac src/src-windows"
         command="export -N" />

    <zip zipfile="${dist}/${version-tag}-src.zip">
      <fileset dir="${dist}">
        <include name="${version-tag}/src/**" />
      </fileset>
    </zip>

    <delete dir="${dist}/${version-tag}" />

    <antcall target="docs" />

    <antcall target="osxapp">
      <param name="osxdir" value="${dist}" />
      <param name="osxtag" value="${version-tag}-osx" />
    </antcall>

    <antcall target="jar">
      <param name="jarfile" value="${dist}/${version-tag}.jar" />
    </antcall>
  </target>

  <target name="compile" depends="do-compile">
    <rmic base="${built}" 
          classname="edu.rice.cs.drjava.model.repl.newjvm.InterpreterJVM"
          classpath="${classpath_text}">
    </rmic>

    <rmic base="${built}"  
          classname="edu.rice.cs.drjava.model.repl.newjvm.MainJVM"
          classpath="${classpath_text}">
    </rmic>
    <copy todir="${built}">
      <fileset dir="${srcroot}">
        <!-- include the GPL -->
        <include name="edu/rice/cs/LICENSE" />

        <!-- include graphics -->
        <include name="${projpath}/**/LICENSE" />
        <include name="${projpath}/**/README" />
        <include name="${projpath}/**/*.gif" />
        <include name="${projpath}/**/*.png" />

 <!-- include files used for testing -->
 <include name="${projpath}/**/testFiles/*" />
      </fileset>
    </copy>

  </target>

    
    
  <!-- targets used to generate the parser for autocompletion -->
  <target name="clean-acparser">
    <!-- <delete file="${acparser_path}/ParseException.java" /> -->
    <!-- <delete file="${acparser_path}/TokenMgrError.java" /> -->
    <!-- <delete file="${acparser_path}/Token.java" /> -->
    <!-- <delete file="${acparser_path}/JavaCharStream.java" /> -->
    <delete file="${acparser_path}/ACParser.java" />
    <delete file="${acparser_path}/ACParserConstants.java" />
    <delete file="${acparser_path}/ACParserTokenManager.java" />
  </target>

  <target name="generate-acparser" depends="init">
    <javacc target="${acparser_path}/jexpr.jj" javacchome="${javacc_home}" outputdirectory="${acparser_path}" />
    <echo message="Uncommenting the generics in the ACParser.java file" />
    <exec executable="sed" dir="${acparser_path}" failonerror="true" output="${acparser_path}/tmpParser1.java">
      <arg line="&quot;s/\/\*&lt;/&lt;/g&quot;" />
      <arg line="ACParser.java" />
    </exec>
    <exec executable="sed" dir="${acparser_path}" failonerror="true" output="${acparser_path}/tmpParser2.java">
      <arg line="&quot;s/&gt;\*\//&gt;/g&quot;" />
      <arg line="tmpParser1.java" />
    </exec>
    <exec executable="sed" dir="${acparser_path}" failonerror="true" output="${acparser_path}/tmpParser1.java">
      <arg line="&quot;s/LinkedList V/LinkedList&lt;VariableDeclarator&gt; V/g&quot;" />
      <arg line="tmpParser2.java" />
    </exec>
    <exec executable="sed" dir="${acparser_path}" failonerror="true" output="${acparser_path}/tmpParser2.java">
      <arg line="&quot;s/Vector jj_expentries = new java.util.Vector()/Vector&lt;int[]&gt; jj_expentries = new java.util.Vector&lt;int[]&gt;()/g&quot;" />
      <arg line="tmpParser1.java" />
    </exec>
    <move file="${acparser_path}/tmpParser2.java" tofile="${acparser_path}/ACParser.java" />
    <delete file="${acparser_path}/tmpParser1.java" />
  </target>

  <target name="rebuild-acparser" depends="clean, clean-acparser, generate-acparser, compile" />
    
  <target name="ccompile" depends="checked-compile">
    <rmic base="${built}"
          classpath="${classpath_text}"
          classname="edu.rice.cs.drjava.model.repl.newjvm.InterpreterJVM" />

    <rmic base="${built}"
          classpath="${classpath_text}"
          classname="edu.rice.cs.drjava.model.repl.newjvm.MainJVM" />

    <copy todir="${built}">
      <fileset dir="${srcroot}">
        <!-- include the GPL -->
        <include name="edu/rice/cs/LICENSE" />

        <!-- include graphics -->
        <include name="${projpath}/**/LICENSE" />
        <include name="${projpath}/**/README" />
        <include name="${projpath}/**/*.gif" />
        <include name="${projpath}/**/*.png" />

 <!-- include files used for testing -->
 <include name="${projpath}/**/testFiles/*" />
      </fileset>
    </copy>

  </target>

  <!-- Compiles the JSR-14 v2.0 and v2.2 specific classes, and adds
       them to compilers.jar in the lib directory.
       Deletes the compiled classes when finished.
    -->
  <target name="compile-jsr14v2_0" depends="init">
    <property name="srcroot_jsr14v2_0" 
              value="${srcroot}/src-jsr14v2_0" />
    <property name="built_jsr14v2_0"
              value="${srcroot}/../built-jsr14v2_0/" />

    <!-- Build the classes -->
    <mkdir dir="${built_jsr14v2_0}" />
    <javac srcdir="${srcroot_jsr14v2_0}"
           includes="${projpath}/**/*java"
           destdir="${built_jsr14v2_0}" 
           bootclasspath="${jsr14_classpath}:${sun.boot.class.path}"
           classpath="{jsr14_collect_classpath}:{jsr14_classpath}:${classpath_text}"
           debug="on"
           source="1.5"
           target="jsr14"
           fork="on"
           optimize="off">
       <compilerarg value="-J-Xbootclasspath/p:${jsr14_classpath}"/>
    </javac>
<!--  commented out because the jsr14 v2.0 compiler adapter must be compiled using
      variance, whereas the rest of DrJava should be compiled with -novariance.
    <antcall target="do-compile">
      <param name="compile-from" value="${srcroot_jsr14v2_0}" />
      <param name="compile-to" value="${built_jsr14v2_0}" />
    </antcall> -->

    <!-- Make a jar in the lib directory. No tests are included. -->
    <jar jarfile="${lib_dir}/compilers.jar" update="yes">
      <fileset dir="${built_jsr14v2_0}">
        <exclude name="**/*Test.class" />
        <exclude name="**/*Test$*.class" />
        <include name="${projpath}/**" />

        <!-- include the GPL -->
        <include name="edu/rice/cs/LICENSE" />
      </fileset>
    </jar>

    <!-- Delete the compiled classes -->
    <delete dir="${built_jsr14v2_0}" />
  </target>
    
    
  <!-- Compiles only the Mac OS X specific classes, and adds
       them to platform.jar in the lib directory.
       Deletes the compiled classes when finished.
    -->
  <target name="compile-mac">
    <property name="srcroot_mac" 
              value="${srcroot}/src-mac" />
    <property name="built_mac"
              value="${srcroot}/../built-mac/" />

    <!-- Build the classes -->
    <mkdir dir="${built_mac}" />
    <antcall target="do-compile">
      <param name="compile-from" value="${srcroot_mac}" />
      <param name="compile-to" value="${built_mac}" />
    </antcall>

    <!-- Make a jar in the lib directory. No tests are included. -->
    <jar jarfile="${lib_dir}/platform.jar" update="yes">
      <fileset dir="${built_mac}">
        <exclude name="**/*Test.class" />
        <exclude name="**/*Test$*.class" />
        <include name="${projpath}/**" />

        <!-- include the GPL -->
        <include name="edu/rice/cs/LICENSE" />
      </fileset>
    </jar>

    <!-- Delete the compiled classes -->
    <delete dir="${built_mac}" />
  </target>
    
  <!-- Compiles only the Mac OS X specific classes and runs
       all JUnit tests included with the platform support class.
       Deletes the compiled classes when finished.
    -->
  <target name="test-mac">
    <property name="srcroot_mac" 
              value="${srcroot}/src-mac" />
    <property name="built_mac"
              value="${srcroot}/../built-mac/" />

    <!-- Build the classes -->
    <mkdir dir="${built_mac}" />
    <antcall target="do-compile">
      <param name="compile-from" value="${srcroot_mac}" />
      <param name="compile-to" value="${built_mac}" />
    </antcall>

    <!-- Run all platform-specific JUnit tests. -->
    <junit printsummary="yes" haltonerror="yes" haltonfailure="yes" fork="yes">
      <classpath>
        <path refid="classpath" />
        <pathelement path="${built_mac}" />
      </classpath>

      <!-- This makes JUnit display info about each test to console -->
      <formatter type="plain" usefile="no" />

      <!-- This makes JUnit run all test classes. It figures out which ones
           automatically, without needing AllTests classes.
      -->
      <batchtest>
        <!-- The root of the fileset must be where edu/ is. -->
        <fileset dir="${srcroot}/src-mac">
          <!-- Include only from projpath to only get classes in this project!
          -->
          <include name="${projpath}/**/*${test-spec}*Test.java" />
          <exclude name="**/AllTests.java" />
          <exclude name="**/Test.java" />
        </fileset>
      </batchtest>
    </junit>

    <!-- Delete the compiled classes -->
    <delete dir="${built_mac}" />
  </target>
    
  <!-- Compiles only the Windows specific classes, and adds
       them to platform.jar in the lib directory.
       Deletes the compiled classes when finished.
    -->
  <target name="compile-windows">
    <property name="srcroot_windows" 
              value="${srcroot}/src-windows" />
    <property name="built_windows"
              value="${srcroot}/../built-windows/" />

    <!-- Build the classes -->
    <mkdir dir="${built_windows}" />
    <antcall target="do-compile">
      <param name="compile-from" value="${srcroot_windows}" />
      <param name="compile-to" value="${built_windows}" />
    </antcall>

    <!-- Make a jar in the lib directory. No tests are included. -->
    <jar jarfile="${lib_dir}/platform.jar" update="yes">
      <fileset dir="${built_windows}">
        <exclude name="**/*Test.class" />
        <exclude name="**/*Test$*.class" />
        <include name="${projpath}/**" />

        <!-- include the GPL -->
        <include name="edu/rice/cs/LICENSE" />
      </fileset>
    </jar>

    <!-- Delete the compiled classes -->
    <delete dir="${built_windows}" />
  </target>

  <!-- Compiles only the Windows specific classes and runs
       all JUnit tests included with the platform support class.
       Deletes the compiled classes when finished.
    -->
  <target name="test-windows">
    <property name="srcroot_windows" 
              value="${srcroot}/src-windows" />
    <property name="built_windows"
              value="${srcroot}/../built-windows/" />

    <!-- Build the classes -->
    <mkdir dir="${built_windows}" />
    <antcall target="do-compile">
      <param name="compile-from" value="${srcroot_windows}" />
      <param name="compile-to" value="${built_windows}" />
    </antcall>

    <!-- Run all platform-specific JUnit tests. -->
    <junit printsummary="yes" haltonerror="yes" haltonfailure="yes" fork="yes">
      <classpath>
        <path refid="classpath" />
        <pathelement path="${built_windows}" />
      </classpath>

      <!-- This makes JUnit display info about each test to console -->
      <formatter type="plain" usefile="no" />

      <!-- This makes JUnit run all test classes. It figures out which ones
           automatically, without needing AllTests classes.
      -->
      <batchtest>
        <!-- The root of the fileset must be where edu/ is. -->
        <fileset dir="${srcroot}/src-windows">
          <!-- Include only from projpath to only get classes in this project!
          -->
          <include name="${projpath}/**/*${test-spec}*Test.java" />
          <exclude name="**/AllTests.java" />
          <exclude name="**/Test.java" />
        </fileset>
      </batchtest>
    </junit>

    <!-- Delete the compiled classes -->
    <delete dir="${built_windows}" />
  </target>

  <target name="osxapp" depends="jar">
    <mkdir dir="${osxdir}/${osxtag}/DrJava.app" />
    <copy todir="${osxdir}/${osxtag}/DrJava.app/">
      <fileset dir="${basedir}/packaging/DrJava.app" 
        excludes="Contents/Resources/Java/DrJava.jar-goes-here" />
    </copy>

    <copy file="${jarfile}" tofile="${osxdir}/${osxtag}/DrJava.app/Contents/Resources/Java/DrJava.jar" />
    
    <tar tarfile="${osxdir}/${osxtag}.tar">
      <tarfileset dir="${osxdir}/">
        <include name="${osxtag}/**/*" />
        <exclude name="${osxtag}/DrJava.app/Contents/MacOS/DrJava" />
      </tarfileset>
      <tarfileset dir="${osxdir}/" mode="755">
        <include name="${osxtag}/DrJava.app/Contents/MacOS/DrJava" />
      </tarfileset>
    </tar>
    <gzip src="${osxdir}/${osxtag}.tar"
      zipfile="${osxdir}/${osxtag}.tar.gz" />

    <delete dir="${osxdir}/${osxtag}" />
    <delete file="${osxdir}/${osxtag}.tar" />
  </target>

  <!-- Makes a jar with dependencies. No tests are included. -->
  <target name="jar">
    <delete file="${jarfile}" />
<!--
    <zip zipfile="${jarfile}">
      <zipfileset src="${srcroot}/edu/rice/cs/LICENSE" />
    </zip>
-->
    <jar jarfile="${jarfile}" manifest="${manifest}" update="true" >
      <!-- Include dependencies -->
      <zipfileset src="${lib_dir}/gj-util.jar"
                  excludes="META-INF/MANIFEST.MF" />
      <zipfileset src="${lib_dir}/dynamicjava.jar"
                  excludes="META-INF/MANIFEST.MF" />
      <zipfileset src="${lib_dir}/junit.jar"
                  excludes="META-INF/MANIFEST.MF" />
      <zipfileset src="${lib_dir}/compilers.jar"
                  excludes="META-INF/MANIFEST.MF" />
      <zipfileset src="${lib_dir}/platform.jar"
                  excludes="META-INF/MANIFEST.MF" />
      <zipfileset src="${lib_dir}/winlaf-0.4.1.jar"
                  excludes="META-INF/MANIFEST.MF" />

<!--      <zipfileset src="${lib_dir}/javaast.jar"
                  excludes="META-INF/MANIFEST.MF" /> -->
    <!-- These two jars to be included when language levels are integrated -->
      <zipfileset src="${lib_dir}/javalanglevels.jar"
                  excludes="META-INF/MANIFEST.MF" />

      <!-- Include DrJava classes -->
      <fileset dir="${built}">
        <include name="${projpath}/**" />
        <exclude name="**/*Test.class" />
        <exclude name="**/*TestCase.class" />
        <exclude name="**/*Test$*.class" />
        <exclude name="${projpath}/docs/developer/**" />
        <include name="edu/rice/cs/util/**" />

        <!-- include the GPL -->
        <include name="edu/rice/cs/LICENSE" />
      </fileset>
    </jar>
  </target>

  <!-- Run the program! -->
  <target name="run" depends="compile">
    <java fork="true" classname="edu.rice.cs.drjava.DrJava">
      <classpath refid="classpath" />
    </java>
  </target>


  <!-- Check if docbook2html is available -->
  <target name="docbook-present">
    <property environment="env"/>
    <available file="docbook2html" property="docbook.present">
      <filepath>
        <pathelement path="${env.PATH}" />
      </filepath>
    </available>
  </target>

  <!-- Check if docbook2pdf is available -->
  <target name="docbook2pdf-present">
    <property environment="env"/>
    <available file="docbook2pdf" property="docbook2pdf.present">
      <filepath>
        <pathelement path="${env.PATH}" />
      </filepath>
    </available>
  </target>

  <!-- Create documentation html -->
  <target name="docs" depends="userdocs,devdocs, userqsdocs" unless="docbook.present">
    <echo message="Could not find docbook2html.  Not generating docs." />
  </target>

  <!-- Create the user documentation -->
  <target name="userdocs" depends="docbook-present" if="docbook.present">
    <delete dir="${doc_dir}/user/" />
    <mkdir dir="${doc_dir}/user/" />
    <echo message="Creating documentation HTML..." />
    <apply executable="docbook2html" failonerror="yes" type="file">
      <arg value="-o"/>
      <arg value="${doc_dir}/user/"/>
      <arg value="-V"/>
      <arg value="%use-id-as-filename%"/>
      <fileset dir="${srcroot}/${projpath}/docs/user">
        <include name="userdoc.docbook" />
      </fileset>
    </apply>

    <!-- Include Language Level chart -->
    <copy todir="${doc_dir}/user" file="${srcroot}/${projpath}/docs/user/LanguageLevelFeatures.jpg" />
    <copy todir="${doc_dir}/user" file="${srcroot}/${projpath}/docs/user/LanguageLevelAugmentation.jpg" />
  </target>

  <!-- Create the user documentation as a PDF -->
  <target name="userdocs-pdf" depends="docbook2pdf-present" if="docbook2pdf.present">
    <echo message="Creating documentation PDF..." />
    <apply executable="docbook2pdf" failonerror="yes" type="file">
      <arg value="-o"/>
      <arg value="${srcroot}/../userdocs"/>
      <fileset dir="${srcroot}/${projpath}/docs/user">
        <include name="userdoc.docbook" />
      </fileset>
    </apply>
  </target>

  <!-- Create the developer documentation -->
  <target name="devdocs" depends="docbook-present" if="docbook.present">
    <delete dir="${doc_dir}/developer/" />
    <mkdir dir="${doc_dir}/developer/" />
    <echo message="Creating documentation HTML..." />
    <apply executable="docbook2html" failonerror="yes" type="file">
      <arg value="-o"/>
      <arg value="${doc_dir}/developer/"/>
      <fileset dir="${srcroot}/${projpath}/docs/developer">
        <include name="devdoc.docbook" />
      </fileset>
    </apply>
  </target>

  <!-- Create the user quick start guide documentation -->
  <target name="userqsdocs" depends="docbook-present" if="docbook.present">
    <delete dir="${doc_dir}/quickstart/" />
    <mkdir dir="${doc_dir}/quickstart/" />
    <echo message="Creating documentation HTML..." />
    <apply executable="docbook2html" failonerror="yes" type="file">
      <arg value="-o"/>
      <arg value="${doc_dir}/quickstart/"/>
      <arg value="-V"/>
      <arg value="%use-id-as-filename%"/>
      <fileset dir="${srcroot}/${projpath}/docs/quickstart">
        <include name="quickstart.docbook" />
      </fileset>
    </apply>

    <!-- Include the jpgs -->
    <copy todir="${doc_dir}/quickstart">
      <fileset dir="${srcroot}/${projpath}/docs/quickstart">
        <include name="*.jpg"/>
      </fileset>
    </copy>
  </target>


  <!-- Create the user documentation as a PDF -->
  <target name="userqsdocs-pdf" depends="docbook2pdf-present" if="docbook2pdf.present">
    <echo message="Creating documentation PDF..." />
    <apply executable="docbook2pdf" failonerror="yes" type="file">
      <arg value="-o"/>
      <arg value="${srcroot}/../userdocs"/>
      <fileset dir="${srcroot}/${projpath}/docs/quickstart">
        <include name="quickstart.docbook" />
      </fileset>
    </apply>
  </target>

  <!-- Allow a commit of just the docs, without testing -->
  <target name="commit-docs">
    <echo message="Committing the documentation." />
    
    <tempfile property="commit-comments-filename" 
            destdir="${java.io.tmpdir}"
            prefix="commit-comments" />
    <antcall target="create-commit-comments">
      <param name="commit-comments-filename" value="${commit-comments-filename}"/>
    </antcall>
    <cvs>
      <commandline>
        <argument value="commit" />
        <argument value="-F" />
        <argument value="${commit-comments-filename}" />
        <argument value="docs" />
      </commandline>
    </cvs>
    <delete file="${commit-comments-filename}"/>
    
  </target>
    
    <!-- Delete all generated files in the config directory -->
    <target name="clean-config">
      <delete dir="${built}/${projpath}/config" />
    </target>

</project>
