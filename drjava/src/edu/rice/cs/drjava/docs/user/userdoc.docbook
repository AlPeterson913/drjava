<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN">

<!--
  User Documentation for DrJava
  @version $Id$
-->
<book id="index">
  <!-- Meta info -->
  <bookinfo>
    <date>2002-6-20</date>
    <title>DrJava User Documentation</title>
  </bookinfo>
  <toc></toc>

  <!-- Chapter: Intro -->
  <chapter id="intro">
    <title>Introduction</title>
    <para>DrJava is a pedagogic programming environment for Java, intended to help students focus more on program design than on the features of a complicated development environment.  It provides an Interactions window based on a "read-eval-print loop", which allows programmers to develop, test, and debug Java programs in an interactive, incremental fashion.</para>
    <simplelist>
      <member>Home Page: <ulink url="http://drjava.sourceforge.net">http://drjava.sourceforge.net</ulink></member>
      <member>Paper: <ulink url="http://drjava.sf.net/papers/drjava-paper.shtml">http://drjava.sf.net/papers/drjava-paper.shtml</ulink></member>
    </simplelist>
  </chapter>


  <!-- ---- Chapter: Getting Started ---- -->
  <chapter id="gettingstarted">
    <title>Getting Started</title>
    <para>This chapter describes the basics for how to start using DrJava, including where to get the program and how to run it.</para>
    <section id="gs-downloading">
      <title>Downloading DrJava</title>
      <para>You can download the newest releases of DrJava as a <filename>.jar</filename> file from our home page, <ulink url="http://drjava.sourceforge.net">http://drjava.sourceforge.net</ulink>, or directly from our <ulink url="http://sourceforge.net/project/showfiles.php?group_id=44253">Project Filelist</ulink> page on SourceForge.</para>
      
      <formalpara>
	<title>Stable and Development Releases</title>
	<para>A distinction is made between Stable and Development releases of DrJava.  All releases must pass our rigorous unit-tests and should be safe to use, but we have found that a period of beta-testing can be helpful for finding additional bugs.  Our Stable releases have gone through a period of beta-testing and should be safe for all users.  Our Development releases contain newer features that are under development.  We believe these releases are also ready to use, but they have not been widely beta-tested, so some users may prefer to use only Stable releases.</para>
      </formalpara>
    </section>

    <section id="gs-running">
      <title>Running DrJava</title>
      <para>DrJava can be started from a command prompt using the <filename>.jar</filename> file you downloaded.  You can optionally give it a list of source files to open at startup.</para>
      <cmdsynopsis>
	<command>java -jar drjava-DATE-TIME.jar</command>
	<arg choice='opt' rep='repeat'>filename.java</arg>
      </cmdsynopsis>
      <para>(Replace DATE-TIME with the appropriate value for your file.)  On many platforms, you can also simply double-click on the <filename>.jar</filename> file and DrJava will start automatically.</para>
    </section>

    <section id="gs-requirements">
      <title>System Requirements</title>
      <para>DrJava requires Java 2 v1.3 or later.  Note that you will need to have the JDK (not the JRE) installed if you wish to use the compiler within DrJava.</para>
      <para>We recommend using <ulink url="http://java.sun.com/j2se/1.4/download.html">Sun's JDK 1.4</ulink> for Solaris, Linux, and Windows.  Other users should use the Java virtual machine that comes with their operating system (including MacOS X).</para>
    </section>

    <section id="gs-license">
      <title>License</title>
      <para>DrJava is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</para>
      <para>DrJava is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</para>
      <para>The full text of the license is available from <ulink url="http://www.gnu.org">www.gnu.org.</ulink>.</para>
      <para>DrJava incorporates DynamicJava (available at <ulink url="http://koala.ilog.fr/djava">http://koala.ilog.fr/djava</ulink>), which is licensed under these terms:</para>
      <para>DynamicJava - Copyright (c) 1999 Dyade</para>
      <para>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</para>
      <para>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</para>
      <para>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL DYADE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE</para>
      <para>Except as contained in this notice, the name of Dyade shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization from Dyade.</para>

    </section>

  </chapter>

  <!-- Chapter: Editing Programs -->
  <chapter id="editing">
    <title>Editing Programs</title>
    <para>While DrJava contains many useful tools for Java development, its primary role is as a simple editor for Java source code.  Like most text editors, it supports a full range of editing features such as "Find/Replace" and "Goto Line", while also providing more advanced features like syntax coloring, automatic indentation, and brace matching.</para>

    <section id="edit-defpane">
      <title>Definitions Pane</title>
      <para>The Definitions Pane is the main window of DrJava, displaying the currently active source file.  As files are edited in this window, DrJava helps out with several useful features.</para>

      <formalpara>
	<title>Syntax Coloring</title>
	<para>Certain types of words are colored differently to help make the structure of the program more apparent.  Any comments appear in green, while Java keywords appear in blue and primitive types and class names appear in dark blue.  Strings are colored red and characters are colored magenta, while the remaining types of text appear in black.  These colors can all be configured by the user (see <link linkend="configuration">Configuring DrJava</link>).</para>
      </formalpara>
      <para>One notable difference between syntax coloring in DrJava and other common editors (such as Emacs) is that DrJava uses <emphasis>fully correct</emphasis> coloring as the document is edited.  For example, simply typing the beginning of a block comment ("/*") will immediately update the coloring of the entire program, unlike other editors which will only update the color of a line when that line is edited.</para>

      <formalpara>
	<title>Automatic Indentation</title>
	<para>As the user types multiple lines of code, DrJava automatically indents each line using common coding conventions.  By default, two spaces are used for each indentation level, although this can be configured.  When the user hits Enter, DrJava indents the new line to the appropriate level.  To re-align an existing line, press the Tab key while the cursor is on the line.  (In DrJava, the Tab key always indents the line, and never inserts a Tab character.)  A block of code can be re-aligned by selecting several lines and then pressing Tab.</para>
      </formalpara>

      <formalpara>
	<title>Brace Matching</title>
	<para>To help the user visualize the structure of the code, DrJava uses highlighting to match braces.  If the cursor is placed immediately after a close brace, parenthesis, or bracket, all text between that character and the corresponding open brace is highlighted in another color.  Like syntax coloring, brace matching is also done in a <emphasis>fully correct</emphasis> fashion, updated with each keystroke.</para>
      </formalpara>
    </section>

    <section id="edit-multiple">
      <title>Multiple Documents</title>
      <para>DrJava supports having multiple documents open at the same time, since most users tend to edit several class files at a time.  The window on the left side of DrJava displays a list of all the names of the open documents, in the order that the files were opened.  The user can edit a particular document by selecting it in the list, or by using the Previous and Next Document actions in the Edit Menu.  Only the class name of a source file is shown in the list and in the title bar, but the full filename is always displayed in the status bar at the bottom of the window.</para>
    </section>

    <section id="edit-navigation">
      <title>Source Navigation</title>
      <para>DrJava also has many simple features to help users edit and navigate source files.</para>

      <formalpara>
	<title>Find/Replace</title>
	<para>DrJava has a powerful Find and Replace utility, which is displayed as one of the tabs at the bottom of the window.  The tab is first displayed by selecting Find/Replace from the Edit Menu (or using the keyboard shortcut, CTRL+F), and can be closed by clicking on the "X" button in the upper right corner or by hitting the Escape key.  To search for a term, simply enter it in the Find text field and click "Find Next" (or press Enter).  To replace the term with another, type the new term in the Replace text field, find an occurrence using "Find Next", and then click "Replace".  The "Replace/Find Next" and "Replace All" buttons can help to speed up this process.</para>
      </formalpara>

      <formalpara>
	<title>Goto Line</title>
	<para>Selecting "Goto Line" from the Edit Menu (or hitting CTRL+G) will display a dialog allowing the user to jump to a particular line number.  This can be useful when viewing stack trace information, which often gives line numbers.</para>
      </formalpara>

      <formalpara>
	<title>Line Numbering</title>
	<para>DrJava displays the cursor's current line number and column number on the right side of the status bar at the bottom of the window.  The line number is shown first and starts at 1, and the column number is shown second and starts at 0.</para>
      </formalpara>

      <formalpara>
	<title>Opening Files at Startup</title>
	<para>For convenience, any number of files can be specified on the command line when starting DrJava, to be opened when the program first starts up.  If no files are specified on the command line, DrJava starts with a new file.</para>
      </formalpara>
    </section>

  </chapter>
  
  <!-- Chapter: Interactions Pane -->
  <chapter id="interactions">
    <title>Interactions Pane</title>
    <para>One of the key strengths of DrJava is its Interactions Pane, which allows the user to enter and evaluate arbitrary Java statements and expressions on the fly.  This can be remarkably useful for beginning students, who no longer have to write main methods, recompile, and run from a command line simply to test how a class or method behaves.  From a teaching standpoint, it is a very easy way to get students started with Java without having to explain the full meaning of "public static void main".  The Interactions Pane can also be used to experiment with new libraries, or even create graphical Swing objects interactively.</para>

    <formalpara>
      <title>How to Use</title>
      <para>DrJava uses <ulink url="http://koala.ilog.fr/djava">DynamicJava</ulink> as the interpreter for the Interactions Pane, which allows execution of any valid Java statements as well as the evaluation of Java expressions.  Simply define variables and call methods as if in a method, or even define new classes and methods.  DrJava provides the ability both to reset the Interactions Pane, if the user wishes to start from scratch, and to abort the current interaction, in the case that a method never returns.</para>
    </formalpara>

    <formalpara>
      <title>Running the Main Method</title>
      <para>For convenience, DrJava supports calling the main method in the Interactions Pane by simply entering "java" followed by the class name and any arguments.  For example, to run MyClass with args "arg1" and "arg2", type the following into the Interactions Pane: "java MyClass arg1 arg2".</para>
    </formalpara>

    <formalpara>
      <title>Useful Shortcuts</title>
      <para>Many actions in the Interactions Pane have keyboard shortcuts that improve the pane's usability.  Use the Up and Down arrow keys to scroll through a history of the previously entered commands, or CTRL+B to clear the current command.  Also, if a command is currently executing, pressing Escape will abort it.</para>
    </formalpara>

    <formalpara>
      <title>Setting the Classpath</title>
      <para>To access any class within the Interactions Pane, it must be included on DrJava's notion of the Interactions classpath, which is different than the user's own classpath.  Any class which is opened in the Definitions Pane of DrJava is automatically added to this classpath, but additional classes can be added using the "extra.classpath" configuration option.  (See <link linkend="configuration">Configuring DrJava</link>.)</para>
    </formalpara>
  </chapter>



  <!-- Chapter: Integrated Compiler -->
  <chapter id="compiling">
    <title>Compiling Programs</title>
    <para>DrJava uses an integrated compiler to speed up the development process and help locate errors.  Rather than switching out to a command line and running "javac", the user can simply click on the Compile button and DrJava will compile the file and display any errors it finds.</para>

    <section id="compiling-file">
      <title>Compiling a File</title>
      <para>To compile any file, simply click on the Compile button in the toolbar, or choose Compile from the Tools menu.  Before the process can begin, all open files must be saved.  This is because files can depend on other files, and it is important that no copies are out of date when the errors are displayed.</para>
    </section>

    <section id="compiling-errors">
      <title>Viewing Compiler Errors</title>
      <para>If any errors are found by the compiler, they are displayed in the Compiler Output tab at the bottom of the window.  A summary of each error is displayed in the list, and clicking on any error will highlight the corresponding line in the appropriate file.  (Note that a file will be opened automatically by DrJava if it contains errors.)  Similarly, if the cursor is moved to a line in a file that contains an error, that line and the corresponding error message are highlighted.</para>
    </section>

    <section id="compiling-selecting">
      <title>Selecting a Compiler</title>
      <para>DrJava supports the use of different Java compilers, such as the traditional Javac supplied with the JDK and the experimental JSR-14 compiler which supports generics.  DrJava will attempt to locate the user's Java compiler on startup by searching for standard installation directories, but sometimes it is unable to find a compiler.  In this case, it will prompt the user to specify the location of a compiler, or allow the user to continue using DrJava without any compiler.  Note that the location of compilers is configurable (see <link linkend="configuration">Configuring DrJava</link>).  If more than one compiler is specified, the active compiler can be selected from the menu on the Compiler Output tab itself.</para>
    </section>
  </chapter>



  <!-- Chapter: JUnit Integration -->
  <chapter id="junit">
    <title>Testing using JUnit</title>
    <para>Unit testing can be a very effective approach for testing programs of any size, and <ulink url="http://www.junit.org">JUnit</ulink> has provided a powerful facility for running unit tests in Java.  In fact, the code for DrJava itself is tested using a massive suite of JUnit tests which must be run before any change to the code can be committed.  To help users test their own programs, support for running JUnit tests is included in DrJava.  Simply click the Test button (or choose "Test Using JUnit" from the Tools menu) when a valid test file is open, and DrJava will run the tests and display any test failures in the "Test Output" tab at the bottom of the window, much the same as compiler errors are displayed.</para>


    <section id="junit-writing">
      <title>Writing JUnit Tests</title>
      <!-- Contributed by Chris Haynes, chaynes@indiana.edu -->
      <para>To use the Test button on a file, the following programming conventions must be used:
<itemizedlist>
	  <listitem>
	    <para>At the top of the file, include:</para>
	    <programlisting>import.junit.framework.TestCase;</programlisting>
	  </listitem>
	  <listitem>
	    <para>The main class of the file must:</para>
	    <itemizedlist>
	      <listitem>
		<para>be <literal>public</literal></para>
	      </listitem>
	      <listitem>
		<para><literal>extend TestCase</literal></para>
	      </listitem>
	      <listitem>
		<para>have a constructor of the form:</para>
		<programlisting>public &lt;classname&gt;(String name) { super(name); }</programlisting>
		<para>Note: If you forget this, you will get an error message that begins "TestCase() is not public..."</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	  <listitem>
	    <para>Methods of this class to be run automatically when the Test command is invoked must:</para>
	    <itemizedlist>
	      <listitem>
		<para>be <literal>public</literal> and <emphasis>not</emphasis> <literal>static</literal></para>
	      </listitem>
	      <listitem>
		<para>return <literal>void</literal></para>
	      </listitem>
	      <listitem>
		<para>take no arguments</para>
	      </listitem>
	      <listitem>
		<para>have a name beginning with <literal>test</literal></para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>
	    <para>Test methods in this class can call any of the following methods:</para>
	    <itemizedlist>
	      <listitem>
		<programlisting>void assertTrue(String, boolean)</programlisting>
		<para>which issues an error report with the given string if the boolean is false.</para>
	      </listitem>
	      <listitem>
		<programlisting>void assertEquals(String, int, int)</programlisting>
		<para>which issues an error report with the given string if the two integers are not equal.  The first int is the expected value, and the second int is the actual (tested) value.  Note that this method can also be called using any Objects, using the <literal>equals()</literal> method for comparison.</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	  
	  <listitem>
	    <para>If there is any setup work to be done before running the tests (such as initializing instance variables), do it in the body of a method with the following contract:</para>
	    <programlisting>protected void setup()</programlisting>
	    <para>This method is automatically run before any tests in the class.</para>
	  </listitem>

	  <listitem>
	    <para>Alternatively, a test suite can be constructed to invoke a series of test methods under programmer control with a method of the form:</para>
	    <programlisting>
public static Test suite() {
  TestSuite suite = new TestSuite();
  suite.addTest(new &lt;classname&gt;("&lt;methodname&gt;");
  ...
  return suite;
}
</programlisting>
	    <para>It is then also necessary to import <literal>TestSuite</literal> and <literal>Test</literal> from <literal>junit.framework</literal>.  There is also a version of the <literal>addTest</literal> method that takes a <literal>Test</literal>, so test suites can be composed.</para>
	  </listitem>
	</itemizedlist>
</para>

      <para>There are many other ways of using JUnit.  See the <ulink url="http://junit.sourceforge.net/doc/cookbook/cookbook.htm">JUnit Cookbook</ulink> for more examples and information.</para>
    </section>

    <section id="junit-failures">
      <title>Viewing Test Failures</title>
      <para>After a JUnit test is run, any failures are displayed in the Test Output tab at the bottom of the window.  This list of failures behaves quite similarly to <link linkend="compiling-errors">compiler errors</link>, in that a summary of the error is given in the tab, and clicking on it highlights the corresponding line in the file.</para>
    </section>

  </chapter>



  <!-- ---- Appendix: Configuring DrJava ---- -->
  <appendix id="configuration">
    <title>Configuring DrJava</title>
    <para>DrJava currently has several configurable options which can be defined in a <filename>.drjava</filename> file in your home directory.  (The path to this file is displayed in DrJava's "About" window, accessible from the help menu.)  This file is a standard Java properties file, with one option on each line and with names and values separated by an equals sign.  Any options which are not defined in your <filename>.drjava</filename> file will have their default value, which is shown below after each option.  The options which are currently available are described below.</para>
    
    <para>Note: All parameters are parsed as standard Java strings, so escape characters must be considered.  Notably, to include a Windows-style path in a parameter value, all backslashes must be escaped.  For example:</para>

    <programlisting>javac.location=c:\\jdk1.4\\lib\\tools.jar</programlisting>
    
    <!-- Resource Location -->
    <formalpara>
      <title>Resource Location Options</title>
      <para>These options specify where to find Java resources on your computer, such as compilers or classpath directories.

        <variablelist>
	  
	  <varlistentry>
	    <term><varname>javac.location = ""</varname></term>
	    <listitem>
	      <para>Used to specify the location of "javac", for use as a compiler within DrJava.  Usually this is the path to <filename>tools.jar</filename> in the JDK's <filename>lib</filename> directory.</para>
	    </listitem>
	  </varlistentry>
	
	  <varlistentry>
	    <term><varname>jsr14.location = ""</varname></term>
	    <term><varname>jsr14.collectionspath = ""</varname></term>
	    <listitem>
	      <para>Used to specify the location of the JSR-14 versions of <filename>javac.jar</filename> and <filename>collect.jar</filename>, respectively, for use as an alternative compiler in DrJava.  The <filename>collect.jar</filename> file contains parameterized collection classes for JSR-14.</para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term><varname>extra.classpath = ""</varname></term>
	    <listitem>
	      <para>Used to specify any directories to append to the classpath of the Interactions window.  Separate the directories using the system-specific path separator (eg.colon on Unix, semicolon on Windows).</para>
	    </listitem>
	  </varlistentry>
	  
	</variablelist>
      </para>
    </formalpara>

    <!-- Colors -->
    <formalpara>
      <title>Color Options</title>
      <para>Colors are defined similarly to HTML colors: as six hexadecimal digits preceded by a pound sign.  The first two digits specify a red value, the next two specify a green value, the next two specify a blue value.  For example, <constant>#00FF00</constant> would be a bright green.

        <!-- Definitions Colors -->
        <variablelist>
	  <title>Syntax Colors for Definitions</title>
	  
	  <varlistentry>
	    <term><varname>definitions.normal.color = #000000</varname></term>
	    <listitem>
	      <para>Used as the default color for program text.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><varname>definitions.keyword.color = #0000FF</varname></term>
	    <listitem>
	      <para>Used as the color for known keywords (eg. "public", "for").</para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term><varname>definitions.type.color = #00007C</varname></term>
	    <listitem>
	      <para>Used for known primitive types (eg. "int") and capitalized words, which usually correspond to class names.</para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term><varname>definitions.comment.color = #007C00</varname></term>
	    <listitem>
	      <para>Used as the color for all comments.</para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term><varname>definitions.double.quoted.color = #B20000</varname></term>
	    <listitem>
	      <para>Used as the color for strings, which use double quotation marks.</para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term><varname>definitions.single.quoted.color = #FF00FF</varname></term>
	    <listitem>
	      <para>Used as the color for characters, which use single quotation marks.</para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term><varname>definitions.number.color = #007C7C</varname></term>
	    <listitem>
	      <para>Used as the color for all numbers.</para>
	    </listitem>
	  </varlistentry>
	  
	</variablelist>

        <!-- Other colors -->
        <variablelist>
	  <title>Other Colors</title>
	  <varlistentry>
	    <term><varname>definitions.match.color = #BEFFE6</varname></term>
	    <listitem>
	      <para>Used as the highlight color when matching braces.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>

      </para>
    </formalpara>

    <!-- Fonts -->
    <formalpara>
      <title>Font Options</title>
      <para>All configurable fonts have three options: the name, the size, and the style.  The font name can be set to anything available from GraphicsEnvironment.getAllFonts(), and the size is any positive integer.  The style option corresponds directly to the style constants in java.awt.Font.  (Use 0 for plain, 1 for bold, 2 for italic, and 3 for bold italic.)</para>
    </formalpara>
    <variablelist>
	
      <varlistentry>
	<term><varname>font.main.name = Monospaced</varname></term>
	<term><varname>font.main.size = 12</varname></term>
	<term><varname>font.main.style = 0</varname></term>
	<listitem>
	  <para>This font is used for the definitions pane and the tabs at the bottom of the window.</para>
	</listitem>
      </varlistentry>
      
      <varlistentry>
	<term><varname>font.doclist.name = Monospaced</varname></term>
	<term><varname>font.doclist.size = 10</varname></term>
	<term><varname>font.doclist.style = 0</varname></term>
	<listitem>
	  <para>This font is used in the list of all open documents on the left side of the window.</para>
	</listitem>
      </varlistentry>
      
      <varlistentry>
	<term><varname>font.toolbar.name = dialog</varname></term>
	<term><varname>font.toolbar.size = 10</varname></term>
	<term><varname>font.toolbar.style = 0</varname></term>
	<listitem>
	  <para>This font is used on the toolbar buttons, if the button names are configured to be displayed.</para>
	</listitem>
      </varlistentry>
      
    </variablelist>
    
    <!-- Other Display -->
    <formalpara>
      <title>Other Display Options</title>
      <para>This configurable options affect how DrJava's user interface is displayed.</para>
    </formalpara>
    <variablelist>
      <title>Toolbar Options</title>
      
      <varlistentry>
	<term><varname>toolbar.icons.enabled = true</varname></term>
	<listitem>
	  <para>Whether to display icons on the toolbar buttons and menu items.</para>
	</listitem>
      </varlistentry>
      
      <varlistentry>
	<term><varname>toolbar.text.enabled = true</varname></term>
	<listitem>
	  <para>Whether to display text on the toolbar buttons.  It is only relevant if the <varname>toolbar.icons.enabled</varname> option is set to true, since text will always be displayed if the icons are disabled.</para>
	</listitem>
      </varlistentry>
      
    </variablelist>

    <!-- Miscellaneous -->
    <formalpara>
      <title>Miscellaneous Options</title>
      <para>These are the remaining configurable options in DrJava.</para>
    </formalpara>
    <variablelist>

      <varlistentry>
	<term><varname>indent.level = 2</varname></term>
	<listitem>
	  <para>Sets how many spaces to use for each level of indenting.  Note that tab characters are not allowed in DrJava.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><varname>working.directory = ""</varname></term>
	<listitem>
	  <para>Specifies the default directory for DrJava to use when starting up.  The open and save dialogs will start here, rather than in the user's current directory, if this option is set.  The Interactions classpath will also include this directory.</para>
	</listitem>
      </varlistentry>
      
      <varlistentry>
	<term><varname>history.max.size = 500</varname></term>
	<listitem>
	  <para>Specifies how many commands will be remembered in the history of the Interactions window.  Previous commands can be recalled using the up and down arrow keys.</para>
	</listitem>
      </varlistentry>
      
    </variablelist>
    
  </appendix>
 
</book>
