/* Generated By:JavaCC: Do not edit this line. ACParserConstants.java */
/*BEGIN_COPYRIGHT_BLOCK
 *
 * This file is part of DrJava.  Download the current version of this project:
 * http://sourceforge.net/projects/drjava/ or http://www.drjava.org/
 *
 * DrJava Open Source License
 * 
 * Copyright (C) 2001-2003 JavaPLT group at Rice University (javaplt@rice.edu)
 * All rights reserved.
 *
 * Developed by:   Java Programming Languages Team
 *                 Rice University
 *                 http://www.cs.rice.edu/~javaplt/
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the "Software"),
 * to deal with the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 *     - Redistributions of source code must retain the above copyright 
 *       notice, this list of conditions and the following disclaimers.
 *     - Redistributions in binary form must reproduce the above copyright 
 *       notice, this list of conditions and the following disclaimers in the
 *       documentation and/or other materials provided with the distribution.
 *     - Neither the names of DrJava, the JavaPLT, Rice University, nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this Software without specific prior written permission.
 *     - Products derived from this software may not be called "DrJava" nor
 *       use the term "DrJava" as part of their names without prior written
 *       permission from the JavaPLT group.  For permission, write to
 *       javaplt@rice.edu.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
 * THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR 
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS WITH THE SOFTWARE.
 * 
END_COPYRIGHT_BLOCK*/

package edu.rice.cs.drjava.model.autocomplete.parser;

public interface ACParserConstants {

  int EOF = 0;
  int SINGLE_LINE_COMMENT = 9;
  int FORMAL_COMMENT = 10;
  int MULTI_LINE_COMMENT = 11;
  int ABSTRACT = 13;
  int BOOLEAN = 14;
  int BREAK = 15;
  int BYTE = 16;
  int CASE = 17;
  int CATCH = 18;
  int CHAR = 19;
  int CLASS = 20;
  int CONST = 21;
  int CONTINUE = 22;
  int _DEFAULT = 23;
  int DO = 24;
  int DOUBLE = 25;
  int ELSE = 26;
  int EXTENDS = 27;
  int FALSE = 28;
  int FINAL = 29;
  int FINALLY = 30;
  int FLOAT = 31;
  int FOR = 32;
  int GOTO = 33;
  int IF = 34;
  int IMPLEMENTS = 35;
  int IMPORT = 36;
  int INSTANCEOF = 37;
  int INT = 38;
  int INTERFACE = 39;
  int LONG = 40;
  int NATIVE = 41;
  int NEW = 42;
  int NULL = 43;
  int PACKAGE = 44;
  int PRIVATE = 45;
  int PROTECTED = 46;
  int PUBLIC = 47;
  int RETURN = 48;
  int SHORT = 49;
  int STRICTFP = 50;
  int STATIC = 51;
  int SUPER = 52;
  int SWITCH = 53;
  int SYNCHRONIZED = 54;
  int THIS = 55;
  int THROW = 56;
  int THROWS = 57;
  int TRANSIENT = 58;
  int TRUE = 59;
  int TRY = 60;
  int VOID = 61;
  int VOLATILE = 62;
  int WHILE = 63;
  int DECIMAL_LITERAL = 64;
  int HEX_LITERAL = 65;
  int OCTAL_LITERAL = 66;
  int LONG_DECIMAL_LITERAL = 67;
  int LONG_HEX_LITERAL = 68;
  int LONG_OCTAL_LITERAL = 69;
  int DOUBLE_FLOATING_POINT_LITERAL = 70;
  int FLOATING_POINT_LITERAL = 71;
  int EXPONENT = 72;
  int CHARACTER_LITERAL = 73;
  int STRING_LITERAL = 74;
  int LETTER = 75;
  int DIGIT = 76;
  int IDENTIFIER = 77;
  int LPAREN = 78;
  int RPAREN = 79;
  int LBRACE = 80;
  int RBRACE = 81;
  int LBRACKET = 82;
  int RBRACKET = 83;
  int SEMICOLON = 84;
  int COMMA = 85;
  int DOT = 86;
  int ASSIGN = 87;
  int GT = 88;
  int LT = 89;
  int BANG = 90;
  int TILDE = 91;
  int HOOK = 92;
  int COLON = 93;
  int EQ = 94;
  int LE = 95;
  int GE = 96;
  int NE = 97;
  int SC_OR = 98;
  int SC_AND = 99;
  int INCR = 100;
  int DECR = 101;
  int PLUS = 102;
  int MINUS = 103;
  int STAR = 104;
  int SLASH = 105;
  int BIT_AND = 106;
  int BIT_OR = 107;
  int XOR = 108;
  int REM = 109;
  int LSHIFT = 110;
  int RSIGNEDSHIFT = 111;
  int RUNSIGNEDSHIFT = 112;
  int RSSHIFT1 = 113;
  int RSSHIFT2 = 114;
  int RUSHIFT1 = 115;
  int RUSHIFT2 = 116;
  int RUSHIFT3 = 117;
  int PLUSASSIGN = 118;
  int MINUSASSIGN = 119;
  int STARASSIGN = 120;
  int SLASHASSIGN = 121;
  int ANDASSIGN = 122;
  int ORASSIGN = 123;
  int XORASSIGN = 124;
  int REMASSIGN = 125;
  int LSHIFTASSIGN = 126;
  int RSIGNEDSHIFTASSIGN = 127;
  int RUNSIGNEDSHIFTASSIGN = 128;
  int OTHER = 129;

  int DEFAULT = 0;
  int IN_SINGLE_LINE_COMMENT = 1;
  int IN_FORMAL_COMMENT = 2;
  int IN_MULTI_LINE_COMMENT = 3;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 12>",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"strictfp\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<LONG_DECIMAL_LITERAL>",
    "<LONG_HEX_LITERAL>",
    "<LONG_OCTAL_LITERAL>",
    "<DOUBLE_FLOATING_POINT_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<LETTER>",
    "<DIGIT>",
    "<IDENTIFIER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\">@1\"",
    "\">@2\"",
    "\">`1\"",
    "\">`2\"",
    "\">`3\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "<OTHER>",
  };

}
