<!--
  $Header$

  Common build-file targets for multiple projects.

  Assumes these variables are set:
    built
    srcroot
    projpath
    public_javadoc_dir
 
-->
<property name="build.sysclasspath" value="last" />

<property name="lib_dir" value="${srcroot}/edu/rice/cs/lib" />

<property name="jsr14_classpath" value="${lib_dir}/jsr14.jar" />

<property name="jars_dir" value="/home/javaplt/public_html/drjava/builds" />

<!-- put javadoc in this directory if generating private javadoc -->
<property name="private_javadoc_dir" value="${srcroot}/../javadoc/${ant.project.name}" />

<!-- classpath to use everywhere. -->
<path id="classpath">
  <pathelement location="${jsr14_classpath}" />
  <pathelement path="${java.class.path}" />
</path>

<!-- Init target. All others depend on it. Initialize the directory. -->
<target name="init">
  <available type="file" file="${jsr14_classpath}" property="jsr14_ok" />
  <antcall target="check_for_jsr14" />

  <tstamp /> <!-- Ant requires us to make time stamp -->
  <mkdir dir="${built}" /> <!-- Make the built directory -->

  <pathconvert refid="classpath"
               property="classpath_text"
               pathsep="${path.separator}" />

</target>

<target name="check_for_jsr14" unless="jsr14_ok">
  <fail message=" JSR-14 prototype compiler was not found. A jar file containing the compiler must be put in ${lib_dir}/jsr14.jar. (We can not distribute the jar for licensing reasons.) To download jsr14, go to http://developer.java.sun.com/developer/earlyAccess/adding_generics. Then unzip the file you downloaded, and move the included javac.jar to lib/jsr14.jar." />
</target>

<!-- Reconcile source with CVS archive -->
<target name="update" depends="init">
  <cvs command="update -d -P" />
</target>

<target name="make-version-stamp">
  <tstamp /> <!-- get new time stamp to use for CVS tag -->

  <!-- Create new Version.java, filling in date and time. -->
  <filter token="DATE" value="${DSTAMP}" />
  <filter token="TIME" value="${TSTAMP}" />
  <copy file="Version.orig"
        tofile="Version.java" 
        overwrite="yes"
        filtering="yes" />
</target>


<!-- Commit source to CVS archive
     Before doing do, we update our copy with the CVS copy. This ensures that
     if there were any clashes, we have to resolve them now. Then we
     recompile (from scratch) and retest. If this all succeeds, we can commit.

     After committing, we tag the build we just made with the tag
     projectname-date-time.
-->
<target name="commit" depends="clean, update, test">
  <antcall target="make-version-stamp" />

  <property name="version-tag"
            value="${ant.project.name}-${DSTAMP}-${TSTAMP}" />

  <!-- recompile to make new version number get into code. -->
  <echo message="All tests passed. Rebuilding to put version tag (${version-tag}) into the code." />
  <antcall target="compile" />

  <cvs command="commit" />

  <cvs command="tag -c ${version-tag}" quiet="true" />

  <echo message="New version ${version-tag} committed to CVS." />
  <echo message="Note: This version has not yet been released. To release it, type the following on a CS net host (sun or frosty): ant -Dversion-tag=${version-tag} release" />

</target>

<!-- commit this version and then release it. only will work on cs net. -->
<target name="commit-and-release">
  <antcall target="commit" />
  <antcall target="release" />
</target>


<!-- Compile. We have to start at srcroot and then selectively include
     just this project in order for it to realize what files have already
     been compiled (preventing needless recompilation)
-->
<target name="do-compile" depends="init">
  <javac srcdir="${srcroot}"
         includes="${projpath}/**/*java"
         destdir="${built}" 
         bootclasspath="${jsr14_classpath}:${sun.boot.class.path}"
         target="1.1"
         debug="on"
         optimize="off"/>

    <!--
    <echo message="Recompiling all classes ..." />
    <apply executable="java" failonerror="yes" parallel="yes" type="file">
      <arg value="-classpath" />
      <arg value="${classpath_text}" />
      <arg value="com.sun.tools.javac.Main" />

      <arg value="-sourcepath" />
      <arg value="${srcroot}" />

      <arg value="-d" />
      <arg value="${built}" />

      <arg value="-target" />
      <arg value="1.1" />

      <arg value="-g" />
      
      <fileset dir="${srcroot}">
        <include name="${projpath}/**/*.java" />
      </fileset>
    </apply>
    -->

</target>


<!-- Now you can run a subset of tests by doing:
     ant -Dtest-spec=XXX run-tests

     Where XXX is the substring that must be in the test's file name
     in order to run it
-->
<property name="test-spec" value="" />
<target name="test-only">
  <junit printsummary="yes" haltonerror="yes" haltonfailure="yes" fork="no">
    <classpath refid="classpath" />

    <!-- This makes JUnit display info about each test to console -->
    <formatter type="plain" usefile="no" />

    <!-- This makes JUnit run all test classes. It figures out which ones
         automatically, without needing AllTests classes.
    -->
    <batchtest>
      <!-- The root of the fileset must be where edu/ is. -->
      <fileset dir="${srcroot}">
        <!-- Include only from projpath to only get classes in this project!
        -->
        <include name="${projpath}/**/*${test-spec}*Test.java" />
        <exclude name="**/AllTests.java" />
        <exclude name="**/Test.java" />
      </fileset>
    </batchtest>
  </junit>
</target>

<!-- Unit test, forcing recompile first -->
<target name="test" depends="compile, test-only">
</target>

<!-- generate private javadoc for current uncommitted version -->
<target name="javadoc" depends="init">
  <tstamp />
  <antcall target="generate_javadoc">
    <param name="javadoc_dir" value="${private_javadoc_dir}" />
    <param name="javadoc_title" value="${user.name}-uncommitted-${ant.project.name}-${DSTAMP}-${TSTAMP}" />
  </antcall>
</target>

<!-- Generate javadoc, removing generics references first.
     The property javadoc_dir must be set when calling this.
     The property javadoc_title must be set when calling this.
-->
<target name="generate_javadoc" if="javadoc_dir" depends="init">
  <delete dir="${javadoc_dir}" />
  <mkdir dir="${javadoc_dir}" />

  <mkdir dir="${javadoc_dir}/src" />

  <!-- run jsr14 from jsr14.jar to make non-generic source. -->
  <apply executable="java" failonerror="yes" parallel="yes" type="file">
    <arg value="-classpath" />
    <arg value="${classpath_text}" />
    <arg value="com.sun.tools.javac.Main" />

    <arg value="-sourcepath" />
    <arg value="${srcroot}" />

    <!-- Generate Java source without generics -->
    <arg value="-s" />

    <arg value="-d" />
    <arg value="${javadoc_dir}/src" />
    
    <fileset dir="${srcroot}">
      <include name="${projpath}/**/*.java" />
    </fileset>
  </apply>

  <!-- Now we need to copy the package.htmls over to the
       directory with the non-generic sources. -->
  <copy todir="${javadoc_dir}/src">
    <fileset dir="${srcroot}">
      <include name="${projpath}/**/package.html" />
    </fileset>
  </copy>

  <javadoc sourcepath="${javadoc_dir}/src"
           destdir="${javadoc_dir}"
           packagenames="edu.rice.cs.${ant.project.name}.*"
           Private="yes"
           Use="yes"
           Version="yes"
           Windowtitle="${javadoc_title}">

    <classpath refid="classpath" />

    <link href="http://www.cs.rice.edu/~javaplt/javadoc/java-api" />
    <link href="http://www.cs.rice.edu/~javaplt/javadoc/junit" />
    <link href="http://www.cs.rice.edu/~javaplt/javadoc/dynamicjava" />
  </javadoc>

  <!-- delete source we generated without generics -->
  <delete dir="${javadoc_dir}/src" />
</target>

<!-- Delete all generated files (only for this project!) -->
<target name="clean">
  <delete dir="${private_javadoc_dir}" />
  <delete dir="${built}/${projpath}" />
  <delete file="${jarfile}" />
</target>

