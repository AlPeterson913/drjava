//This should also not throw a null pointer exception on compile: it was before, because we weren't handling the ordering of interfaces and classes correctly.

interface TestI2 {
  public int silly();
}


class TestYeah2 implements TestI2 {
  public int myMethod() { 
    return 5;
  }
  public int silly() {
    return 6; 
  }

  /** This method is automatically generated by the Language Level Converter. */
  public TestYeah2() {
    super();
  }

  /** This method is automatically generated by the Language Level Converter. */
  public java.lang.String toString() {
    return getClass().getName() + "(" + 
        ")";
  }

  /** This method is automatically generated by the Language Level Converter. */
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    else if ((o == null) || (! o.getClass().equals(getClass()))) {
      return false;
    }
    else {
      TestYeah2 cast = ((TestYeah2) o);
      return true;
    }
  }

  /** This method is automatically generated by the Language Level Converter. */
  public int hashCode() {
    return getClass().hashCode();
  }
}


class TestYou2 {
  public int brokenMethod() {
    return 4;//myMethod();
  }

  /** This method is automatically generated by the Language Level Converter. */
  public TestYou2() {
    super();
  }

  /** This method is automatically generated by the Language Level Converter. */
  public java.lang.String toString() {
    return getClass().getName() + "(" + 
        ")";
  }

  /** This method is automatically generated by the Language Level Converter. */
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    else if ((o == null) || (! o.getClass().equals(getClass()))) {
      return false;
    }
    else {
      TestYou2 cast = ((TestYou2) o);
      return true;
    }
  }

  /** This method is automatically generated by the Language Level Converter. */
  public int hashCode() {
    return getClass().hashCode();
  }
}
