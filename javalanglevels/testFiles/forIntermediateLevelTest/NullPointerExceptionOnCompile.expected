//This should not throw a null pointer exception on compile: it was before, because we weren't handling the ordering of interfaces and classes correctly. //[1]
class TestYeah implements TestI { //[2]
  public int myMethod() {  //[3]
    return 5; //[4]
  } //[5]
  public int silly() { //[6]
    return 6;  //[7]
  } //[8]

  /** This method is automatically generated by the Language Level Converter. */
  public TestYeah() {
    super();
  }

  /** This method is automatically generated by the Language Level Converter. */
  public java.lang.String toString() {
    return getClass().getName() + "(" + 
        ")";
  }

  /** This method is automatically generated by the Language Level Converter. */
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    else if ((o == null) || (! o.getClass().equals(getClass()))) {
      return false;
    }
    else {
      TestYeah cast = ((TestYeah) o);
      return true;
    }
  }

  /** This method is automatically generated by the Language Level Converter. */
  public int hashCode() {
    return getClass().hashCode();
  }
} //[9]
//[10]
interface TestI { //[11]
  public int silly(); //[12]
} //[13]
//[14]
class TestYou { //[15]
  public int brokenMethod() { //[16]
    return 4;//myMethod(); //[17]
  } //[18]

  /** This method is automatically generated by the Language Level Converter. */
  public TestYou() {
    super();
  }

  /** This method is automatically generated by the Language Level Converter. */
  public java.lang.String toString() {
    return getClass().getName() + "(" + 
        ")";
  }

  /** This method is automatically generated by the Language Level Converter. */
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    else if ((o == null) || (! o.getClass().equals(getClass()))) {
      return false;
    }
    else {
      TestYou cast = ((TestYou) o);
      return true;
    }
  }

  /** This method is automatically generated by the Language Level Converter. */
  public int hashCode() {
    return getClass().hashCode();
  }
}
