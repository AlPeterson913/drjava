class CrazyTryCatchAllCaught { //[1]
  //[2]
  public int myMethod(final int i, final int j, final char c) { //[3]
    try { //[4]
      if (i+c < j) { //[5]
        throw new ClassNotFoundException("Someone had better catch me!"); //[6]
      } //[7]
      try { //[8]
        if (c < j) { //[9]
          throw new CloneNotSupportedException("And someone had better catch me too!"); //[10]
        } //[11]
        else if (i<j) { //[12]
          throw new InstantiationException("And me too!"); //[13]
        } //[14]
        else throw new RuntimeException("No one needs to catch me"); //[15]
      } //[16]
      catch (final InstantiationException e) { //[17]
        throw new RuntimeException("yeehah!"); //[18]
      } //[19]
      //[20]
    } //[21]
    catch (final ClassNotFoundException e) { //[22]
      throw new RuntimeException("I caught your exception, but you don't have to catch me."); //[23]
    } //[24]
    catch (final CloneNotSupportedException e) { //[25]
      System.out.println("ohh yeah"); //[26]
    } //[27]
    return 5; //[28]
  } //[29]
      //[30]

  /** This method is automatically generated by the Language Level Converter. */
  public CrazyTryCatchAllCaught() {
    super();
  }

  /** This method is automatically generated by the Language Level Converter. */
  public java.lang.String toString() {
    return getClass().getName() + "(" + 
        ")";
  }

  /** This method is automatically generated by the Language Level Converter. */
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    else if ((o == null) || (! o.getClass().equals(getClass()))) {
      return false;
    }
    else {
      CrazyTryCatchAllCaught cast = ((CrazyTryCatchAllCaught) o);
      return true;
    }
  }

  /** This method is automatically generated by the Language Level Converter. */
  public int hashCode() {
    return getClass().hashCode();
  }
} //[31]